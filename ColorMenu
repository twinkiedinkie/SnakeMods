/*dark snake menu*/
window.snake.scheme = function(settings = {}) {
  if(settings.scoreBar === undefined)
    settings.scoreBar = '#4A752C';
  if(settings.walls === undefined)
    settings.walls = '#578A34';
  if(settings.shadows === undefined)
    settings.shadows = '#94BD46';
  if(settings.lightSquares === undefined)
    settings.lightSquares = '#A2D149';
  if(settings.darkSquares === undefined)
    settings.darkSquares = '#AAD751';
  
  document.body.bgColor = settings.background || settings.scoreBar;
  document.body.getElementsByClassName('sEOCsb')[0].style.backgroundColor = settings.scoreBar;


  const regexes = [
    new RegExp(`[a-zA-Z0-9_]{0,6}=function\\(a\\){[^}]*globalCompositeOperation="destination-atop"[^}]*fillStyle="${settings.shadows}";[^}]*}`),
    new RegExp(`[a-zA-Z0-9_]{0,6}\.prototype\.[a-zA-Z0-9_]{0,6}=function\\(a\\){if\\(this\\.[a-zA-Z0-9_]{0,6}&&!this\\.[a-zA-Z0-9_]{0,6}\\){if\\([a-zA-Z0-9_]{0,6}\\(this,8\\)[^]*?${settings.lightSquares.replace(/#/g, '')}[^]*?\\(\\),a\\)\\)}}`),
    /[a-zA-Z0-9_]{0,6}\.prototype\.[a-zA-Z0-9_]{0,6}=function\(\){var a=this,b=[a-zA-Z0-9_]{0,6}\(\);[^]*?;return [a-zA-Z0-9_]{0,6}\.promise}/,
  ];

  const scriptElements = document.getElementsByTagName('script');
  const url = scriptElements[scriptElements.length - 1].src; // Source code belongs to the bottom script tag
  
  // xhr to get source code
  const req = new XMLHttpRequest();
  
  req.open("GET", url);
  req.onload = function() {
    processSnakeCode(this.responseText);
  }
  req.send();

  function processSnakeCode(snakeCode) {
    const darkModeCode = snakeCode.replace(/#578A34/g, settings.walls)        // walls
                                  .replace(/#94BD46/g, settings.shadows)      // shadows
                                  .replace(/#A2D149/g, settings.lightSquares) // light squares
                                  .replace(/#AAD751/g, settings.darkSquares); // dark squares
                                  
    regexes.forEach(r => (/*console.log(darkModeCode.match(r)),*/darkModeCode.match(r) != null ? eval(darkModeCode.match(r)[0]) : 0));
  }
};

window.snake.dark = function() {
  return window.snake.scheme({
    scoreBar: '#000000',
    walls: '#101010',
    shadows: '#111111',
    lightSquares: '#171717',
    darkSquares: '#1E1E1E',
  });
};

window.snake.dark_googleSearch = function() {
	return window.snake.scheme_googleSearch({
		background: '#000000',
    walls: '#101010',
    shadows: '#111111',
    lightSquares: '#171717',
    darkSquares: '#1E1E1E',
	})
}

window.snake.fishesHUD = function(settings = {}) {
  if(settings.background === undefined)
    settings.background = 'black';
	if(settings.showInputDisplay === undefined)
		settings.showInputDisplay = true;
	if(settings.arrows === undefined)
		settings.arrows = false;
	if(settings.darkModeGang === undefined)
		settings.darkModeGang = true;
	if(settings.burgerGang === undefined)
		settings.burgerGang = true;
	if(settings.showLilSebastianImages === undefined)
		settings.showLilSebastianImages = true;

  if(settings.showInputDisplay) {
    const buttonSize = 50;
    let buttons = {
      up:    { x: 20 + buttonSize,     y: 10,              pressed: false, character: settings.arrows ? '↑' : 'W', }, 
      left:  { x: 10,                  y: 20 + buttonSize, pressed: false, character: settings.arrows ? '←' : 'A', },
      down:  { x: 20 + buttonSize,     y: 20 + buttonSize, pressed: false, character: settings.arrows ? '↓' : 'S', },
      right: { x: 30 + 2 * buttonSize, y: 20 + buttonSize, pressed: false, character: settings.arrows ? '→' : 'D', },
    };
    document.body.addEventListener('keydown', evt => {
      if(evt.keyCode === 87)
        buttons.up.pressed = true;
      if(evt.keyCode === 65)
        buttons.left.pressed = true;
      if(evt.keyCode === 83)
        buttons.down.pressed = true;
      if(evt.keyCode === 68)
        buttons.right.pressed = true;
    });
    document.body.addEventListener('keyup', evt => {
      if(evt.keyCode === 87)
        buttons.up.pressed = false;
      if(evt.keyCode === 65)
        buttons.left.pressed = false;
      if(evt.keyCode === 83)
        buttons.down.pressed = false;
      if(evt.keyCode === 68)
        buttons.right.pressed = false;
    });

		const canv = document.createElement('canvas');
		canv.width = '200';
		canv.height = '150';
		canv.style.position = 'fixed';
		canv.style.left = '600px';
		canv.style.bottom = '0px';
		document.body.appendChild(canv);

		const ctx = canv.getContext('2d');

		setInterval(_ => {
			ctx.fillStyle = settings.background;
			ctx.fillRect(0, 0, canv.width, canv.height);
			
			for(let button of Object.values(buttons)) {
				ctx.fillStyle = button.pressed ? '#ffffff55' : '#99999955';
				ctx.strokeStyle = 'black';
				ctx.lineWidth = 4;
				
				ctx.fillRect(button.x, button.y, buttonSize, buttonSize);
				ctx.strokeRect(button.x, button.y, buttonSize, buttonSize);
				
				let c = button.character;
				ctx.fillStyle = 'black';
				let fontSize = 32;
				ctx.textAlign = 'center';
				ctx.font = `${fontSize}px consolas`;
				ctx.fillText(c, button.x + buttonSize / 2, button.y + buttonSize / 2 + fontSize / 3);
			}
		}, 1000 / 60);
	}

	if(settings.darkModeGang) {
		const darkImg = document.createElement('img');
		darkImg.src = 'https://i.postimg.cc/Pq4cFZnR/818477021390045215.png';
		darkImg.width = 100;
		darkImg.height = 100;
		darkImg.style.position = 'fixed';
		darkImg.style.right = '0px';
		darkImg.style.bottom = '0px';
		document.body.appendChild(darkImg);
	}

	if(settings.burgerGang) {
		const burgerImg = document.createElement('img');
		burgerImg.src = 'https://i.postimg.cc/G2kpNdj2/818584036782899231.png';
		burgerImg.width = 100;
		burgerImg.height = 100;
		burgerImg.style.position = 'fixed';
		burgerImg.style.right = `${settings.darkModeGang ? 100 : 0}px`;
		burgerImg.style.bottom = '0px';
		document.body.appendChild(burgerImg);
	}

	if(settings.showLilSebastianImages) {
		const horseImg = document.createElement('img');
		horseImg.src = 'https://assets-auto.rbl.ms/531b67415e6c7c2f26ab211bb24a2c87c04d4583019e79ec177f336de9b2aa4c';
		horseImg.width = 200;
		horseImg.height = horseImg.width
		horseImg.style.position = 'fixed';
		horseImg.style.right = '0px';
		horseImg.style.top = '0px';
		document.body.appendChild(horseImg);

		const horseImg1 = document.createElement('img');
		horseImg1.src = 'http://esq.h-cdn.co/assets/15/08/1024x512/landscape_1424204090-tumblr_m4g0ddotsx1qa1w9bo1_1280.jpg';
		horseImg1.width = 200;
		horseImg1.height = horseImg1.width / 2;
		horseImg1.style.position = 'fixed';
		horseImg1.style.right = `${horseImg.width}px`;
		horseImg1.style.top = '0px';
		document.body.appendChild(horseImg1);
	}
};


window.snake.burger = function() {

};



// -----------------------------------------------------------------


window.snake.scheme_googleSearch = function(settings = {}) {
  
  if(settings.background === undefined)
    settings.background = '#4A752C';
  if(settings.walls === undefined)
    settings.walls = '#578A34';
  if(settings.shadows === undefined)
    settings.shadows = '#94BD46';
  if(settings.lightSquares === undefined)
    settings.lightSquares = '#AAD751';
  if(settings.darkSquares === undefined)
    settings.darkSquares = '#A2D149';

  eval(`s_a0c=function(a){a.La.globalCompositeOperation="destination-atop";a.La.fillStyle="${settings.shadows}";a.La.fillRect(0,0,a.La.canvas.width,a.La.canvas.height);a.La.drawImage(a.Ba.canvas,0,a.oa/6);s_oD(a,2)&&(a.La.globalCompositeOperation="source-over")};`);
  eval(`s_qD.prototype.Lj=function(a){if(this.cZb&&!this.uB){if(s_oD(this,8)&&0<this.Jo.length){for(var b=.0035*(a-this.Cg)*(0===this.As?1:1===this.As?1.33:.66),c=0;c<this.Jo.length;c+=1){var d=this.Jo[c];d.Ed.y+=4*b;d.uc.x+=d.Ed.x*b;d.uc.y+=d.Ed.y*b;d.angle+=d.ddc*b;d.size=Math.max(0,d.size-.025*b);0>=d.size&&(this.Jo.splice(c,1),c--)}}c=!1;b=this.Sa||"NONE"!==this.ub;if("NONE"!==this.Da||b){for(;a-this.Cg>=this.Ke;){this.Cg+=this.Ke,this.Sd++,(!this.Ia||1<this.Ma)&&this.EPa++,s_9_c(this),c=!0}}else{this.Cg=a,c=!0}b=(a-this.Cg)/this.Ke;this.Ia&&this.Yj&&(b=0);this.Ba.clearRect(0,0,this.Ba.canvas.width,this.Ba.canvas.height);this.La.clearRect(0,0,this.La.canvas.width,this.La.canvas.height);this.Oa.fillStyle="${settings.shadows}";this.Oa.fillRect(0,0,this.Oa.canvas.width,this.Oa.canvas.height);s_oD(this,4)&&(this.Ba.save(),this.Ba.translate(2*this.oa,2*this.oa));d=!1;for(var e=s_oD(this,4)||s_oD(this,6)||s_oD(this,7),f=s_b(this.wa),g=f.next();!g.done;g=f.next()){g=g.value;!d&&(this.ka[0].y<=g.uc.y||"UP"===this.Da||e)&&(s_$_c(this,b,c),d=!0);var h=b,k=g.uc.clone();k.x=k.x*this.oa+this.oa/2;k.y=k.y*this.oa+this.oa/2;if(s_oD(this,6)&&!g.xo&&!this.Ia){var l=g.uc.clone();l.x+=0<g.EK.x?g.Ed.x:0;l.y+=0<g.EK.y?g.Ed.y:0;l.x=l.x*this.oa+this.oa/2;l.y=l.y*this.oa+this.oa/2;k.x=k.x*(1-h)+l.x*h;k.y=k.y*(1-h)+l.y*h;l=this.oa/10*(2*Math.abs(2*(h+.25-Math.floor(h+.75)))-1);0===g.EK.x&&(k.x+=l*Math.sign(g.Ed.x));0===g.EK.y&&(k.y+=l*Math.sign(g.Ed.y))}l=this.oa*(s_oD(this,6)?1.65:1.2)*(g.xo?h:1);var m=this.Sa||"NONE"!==this.ub;g.xo||"NONE"===this.Da&&!m||s_oD(this,6)||(h=(g.NB+(this.Ia?0:h))/6,m= -h*Math.log2(h)-(1-h)*Math.log2(1-h),0===h&&(m=0),l*=1+m*this.dU,l=Math.round(l));this.Ba.drawImage(s_P_c(this.S3[0<g.type&&g.type<this.S3.length?g.type:0]),0,0,128,128,k.x-l/2,k.y-l/2,l,l)}d||s_$_c(this,b,c);if(s_oD(this,8)){for(c=s_b(this.Qa),d=c.next();!d.done;d=c.next()){g=b,d=d.value,e=d.uc.clone(),e.x=e.x*this.oa+this.oa/2,e.y=e.y*this.oa+this.oa/2,f=1.2*this.oa*(d.xo&&!this.Ia?g:1),d.xo||"NONE"===this.Da||(g=(d.NB+(this.Ia?0:g))/6,k= -g*Math.log2(g)-(1-g)*Math.log2(1-g),0===g&&(k=0),f*=1+k*this.dU,f=Math.round(f)),this.Ba.drawImage(s_P_c(this.O9b),128*d.type,0,128,128,e.x-f/2,e.y-f/2,f,f)}}s_oD(this,4)||s_a0c(this);c=s_b(this.Pc);for(d=c.next();!d.done;d=c.next()){k=d.value,d=new s_Nf(k.uc.x*this.oa+this.oa/2,k.uc.y*this.oa+this.oa/2),g=(k.NB+(this.Ia?0:b))/6,e=(Math.sin(g*Math.PI*2)+1)/2,0===g&&(e=0),f=.5*this.oa*(k.iX?Math.sqrt(1-b):1)*(k.xo?.3+.7*b:1),f=Math.round(f*(1+.4*e)),k=s_Vr(k.color),h=s_Wr(s_Yr(k,.15*e)),k=s_Wr(s_Yr(k,.05*(1-e))),this.La.fillStyle=h,this.La.beginPath(),this.La.arc(d.x,d.y,f,0,2*Math.PI),this.La.fill(),h=f/8*e,g=new s_Nf(h*Math.cos(2*g*Math.PI),h*Math.sin(2*g*Math.PI)),e=f*(.5+.25*e),this.La.fillStyle=k,this.La.beginPath(),this.La.arc(d.x+g.x,d.y+g.y,e,0,2*Math.PI),this.La.fill()}if(s_oD(this,1)||s_oD(this,8)){for(c=s_b(this.Ic),d=c.next();!d.done;d=c.next()){d=d.value,e=new s_Nf(d.uc.x*this.oa+this.oa/2,d.uc.y*this.oa+this.oa/2),f=this.oa*(d.xo?b:1),this.Ba.fillStyle="${settings.shadows}",this.Ba.fillRect(e.x-f/2,e.y-f/2,f,f),s_oD(this,8)&&this.Ba.drawImage(s_P_c(this.tib),128*d.UW,0,128,128,e.x-f/2,e.y-f/2,f,f)}}0<this.Eu&&(c=this.oa/30,d=Math.floor((this.xPa-this.Eu+b)/this.xPa*this.Du.oa)%this.Du.oa,e=new s_Nf(this.Dc.x*this.oa+this.oa/2,this.Dc.y*this.oa+this.oa/2),f=new s_Nf(-this.Du.zd(),-this.Du.Zc()/2),this.Du.render(d,e,f,this.wk,c),s_oD(this,7)&&this.Du.render(d,new s_Nf(this.Ba.canvas.width-e.x,this.Ba.canvas.height-e.y),f,this.wk+Math.PI,c));if(s_oD(this,8)){for(c=s_b(this.Jo),d=c.next();!d.done;d=c.next()){d=d.value,e=Math.round(d.uc.x+this.oa/2),f=Math.round(d.uc.y+this.oa/2),g=d.angle*Math.PI/180,this.Ba.save(),this.Ba.translate(e,f),this.Ba.rotate(g),e=Math.min(1,d.size),this.Ba.fillStyle="${settings.shadows}",this.Ba.fillRect(-(this.oa/2)*e,-(this.oa/2)*e,this.oa*e,this.oa*e),this.Ba.drawImage(s_P_c(this.tib),128*d.UW,0,128,128,-(this.oa/2)*e,-(this.oa/2)*e,this.oa*e,this.oa*e),this.Ba.restore()}}d=c=0;1<this.Ma&&(c=8*Math.random()-4,d=8*Math.random()-4);if(s_oD(this,4)){e=0===b;this.Oa.fillStyle="${settings.lightSquares}";this.Oa.fillRect(0,0,this.Oa.canvas.width,this.Oa.canvas.height);this.Oa.fillStyle="${settings.darkSquares}";b=new s_Nf(this.Oa.canvas.width/2%this.oa,this.Oa.canvas.height/2%this.oa);e=(e&&!this.Ia||this.Ia&&2<this.Ma)&&("LEFT"===this.Da||"UP"===this.Da);f=new s_Nf(this.xI.x%this.oa,this.xI.y%this.oa);for(g=-1;g<this.Aa.width+3;g+=1){for(k=-1;k<this.Aa.height+3;k+=1){Math.abs((g+k)%2)!==(this.EPa+(e?1:0))%2&&this.Oa.fillRect(g*this.oa-f.x+b.x,k*this.oa-f.y+b.y,this.oa,this.oa)}}this.Ba.restore();this.hb.clearRect(0,0,this.hb.canvas.width,this.hb.canvas.height);this.hb.drawImage(this.Ba.canvas,0,0);this.Ba.clearRect(0,0,this.Ba.canvas.width,this.Ba.canvas.height);b=Math.round(this.Ba.canvas.width/2-this.xI.x-2*this.oa);e=Math.round(this.Ba.canvas.height/2-this.xI.y-2*this.oa);f=2*this.oa;g=b>= -f;k=b<=f;h=e<=f;l=this.Aa.width*this.oa;m=this.Aa.height*this.oa;e>= -f&&(g&&this.Ba.drawImage(this.hb.canvas,b-l,e-m),k&&this.Ba.drawImage(this.hb.canvas,b+l,e-m),this.Ba.drawImage(this.hb.canvas,b,e-m));g&&this.Ba.drawImage(this.hb.canvas,b-l,e);k&&this.Ba.drawImage(this.hb.canvas,b+l,e);h&&(g&&this.Ba.drawImage(this.hb.canvas,b-l,e+m),k&&this.Ba.drawImage(this.hb.canvas,b+l,e+m),this.Ba.drawImage(this.hb.canvas,b,e+m));this.Ba.drawImage(this.hb.canvas,b,e);s_a0c(this);b=(this.Ba.canvas.width-this.Oa.canvas.width)/2;e=(this.Ba.canvas.height-this.Oa.canvas.height)/2;this.Oa.drawImage(this.La.canvas,c-b,d-e);this.Oa.drawImage(this.Ba.canvas,c-b,d-e)}else{b=(this.Oa.canvas.width-this.jf.canvas.width)/2,e=(this.Oa.canvas.height-this.jf.canvas.height)/2,this.jf.drawImage(this.Gk.canvas,c,d),this.jf.drawImage(this.La.canvas,c,d),this.jf.drawImage(this.Ba.canvas,c,d),this.Oa.drawImage(this.jf.canvas,b,e)}s_H(this.Pa("UEI8qf").el(),"visibility",this.H0a?"visible":"hidden");s_H(this.Pa("E5ziSe").el(),"visibility",this.H0a?"visible":"hidden");s_ng(this.Pa("A0kWCf").el(),this.Hb);s_ng(this.Pa("E5ziSe").el(),this.Of.has(s_3_c(this))?this.Of.get(s_3_c(this)):0);s_ng(this.Pa("LOtDEe").el(),this.Hb);s_ng(this.Pa("Vp6PHf").el(),this.Of.has(s_3_c(this,!0))?this.Of.get(s_3_c(this,!0)):0);if(this.xd){if(this.Qg){for(b=s_7h(this.Ea("akczce").el()),c=0<=this.Ca.IAa?s_b0c:new s_Nf(0,0),d=s_b(this.Ca.rows),e=d.next();!e.done;e=d.next()){e=e.value,f=s_Mh(e).x,g=this.Ca.IKa.get(e.id),this.Ca.h1.x>=c.x&&void 0!==g&&(f=.25*g+.75*f,g=s_Yh(e).width,k=b.width/2,s_Lh(e,Math.max(k-g,Math.min(k,f)),0))}}}else{s_c0c(this)}this.Ki&&(a=s_d0c(this.Ia&&0<this.Fu&&"NONE"!==this.Da?this.Fu*this.Ke:this.Sd*this.Ke+(a-this.Cg)),s_ng(this.Ea("yddQF").el(),a))}};`);
  eval(`s_qD.prototype.P0=function(){var a=this,b=s_7a();s_Mg(function(){a.Ue=s_7h(a.lp);if(0!=a.Ue.width){var c=a.Ue.width,d=a.Ue.height,e=!s_4_c(a)&&!a.p$a;c-=e?40:0;d-=e?40:0;a:switch(a.Zd){case 2:e=512;break a;case 1:e=96;break a;default:e=256};e=c*d/e;a.oa?a.oa=Math.min(Math.floor(c/a.Aa.width),Math.floor(d/a.Aa.height)):(a.oa=Math.floor(Math.sqrt(e)),a.Aa=new s_Rf(Math.floor(c/a.oa),Math.floor(d/a.oa)));a.dU=a.oa/128;a.lp.width=a.Ue.width;a.lp.height=a.Ue.height;a.Gk.canvas.width=a.Aa.width*a.oa;a.Gk.canvas.height=a.Aa.height*a.oa;c=s_oD(a,4)?4:0;a.Ba.canvas.width=(a.Aa.width+c)*a.oa;a.Ba.canvas.height=(a.Aa.height+c)*a.oa;a.hb.canvas.width=a.Ba.canvas.width;a.hb.canvas.height=a.Ba.canvas.height;a.La.canvas.width=(a.Aa.width+c)*a.oa;a.La.canvas.height=(a.Aa.height+c)*a.oa;a.jf.canvas.width=a.Aa.width*a.oa;a.jf.canvas.height=a.Aa.height*a.oa;c=s_7h(a.Og);0<c.width&&0<c.height&&(a.ue.canvas.width=c.width,a.ue.canvas.height=c.height);s_e0c(a);a.Gk.fillStyle="${settings.darkSquares}";a.Gk.fillRect(0,0,a.Ue.width,a.Ue.height);for(c=0;c<a.Aa.width;c+=1){for(d=0;d<a.Aa.height;d+=1){0!==(c+d)%2&&(a.Gk.fillStyle="${settings.lightSquares}",a.Gk.fillRect(c*a.oa,d*a.oa,a.oa,a.oa))}}}b.resolve()});return b.promise};`);
  eval(`s_qD.prototype.Lj=function(a){if(this.cZb&&!this.uB){if(s_oD(this,8)&&0<this.Jo.length){for(var b=.0035*(a-this.Cg)*(0===this.As?1:1===this.As?1.33:.66),c=0;c<this.Jo.length;c+=1){var d=this.Jo[c];d.Ed.y+=4*b;d.uc.x+=d.Ed.x*b;d.uc.y+=d.Ed.y*b;d.angle+=d.ddc*b;d.size=Math.max(0,d.size-.025*b);0>=d.size&&(this.Jo.splice(c,1),c--)}}c=!1;b=this.Sa||"NONE"!==this.ub;if("NONE"!==this.Da||b){for(;a-this.Cg>=this.Ke;){this.Cg+=this.Ke,this.Sd++,(!this.Ia||1<this.Ma)&&this.EPa++,s_9_c(this),c=!0}}else{this.Cg=a,c=!0}b=(a-this.Cg)/this.Ke;this.Ia&&this.Yj&&(b=0);this.Ba.clearRect(0,0,this.Ba.canvas.width,this.Ba.canvas.height);this.La.clearRect(0,0,this.La.canvas.width,this.La.canvas.height);this.Oa.fillStyle="${settings.shados}";this.Oa.fillRect(0,0,this.Oa.canvas.width,this.Oa.canvas.height);s_oD(this,4)&&(this.Ba.save(),this.Ba.translate(2*this.oa,2*this.oa));d=!1;for(var e=s_oD(this,4)||s_oD(this,6)||s_oD(this,7),f=s_b(this.wa),g=f.next();!g.done;g=f.next()){g=g.value;!d&&(this.ka[0].y<=g.uc.y||"UP"===this.Da||e)&&(s_$_c(this,b,c),d=!0);var h=b,k=g.uc.clone();k.x=k.x*this.oa+this.oa/2;k.y=k.y*this.oa+this.oa/2;if(s_oD(this,6)&&!g.xo&&!this.Ia){var l=g.uc.clone();l.x+=0<g.EK.x?g.Ed.x:0;l.y+=0<g.EK.y?g.Ed.y:0;l.x=l.x*this.oa+this.oa/2;l.y=l.y*this.oa+this.oa/2;k.x=k.x*(1-h)+l.x*h;k.y=k.y*(1-h)+l.y*h;l=this.oa/10*(2*Math.abs(2*(h+.25-Math.floor(h+.75)))-1);0===g.EK.x&&(k.x+=l*Math.sign(g.Ed.x));0===g.EK.y&&(k.y+=l*Math.sign(g.Ed.y))}l=this.oa*(s_oD(this,6)?1.65:1.2)*(g.xo?h:1);var m=this.Sa||"NONE"!==this.ub;g.xo||"NONE"===this.Da&&!m||s_oD(this,6)||(h=(g.NB+(this.Ia?0:h))/6,m= -h*Math.log2(h)-(1-h)*Math.log2(1-h),0===h&&(m=0),l*=1+m*this.dU,l=Math.round(l));this.Ba.drawImage(s_P_c(this.S3[0<g.type&&g.type<this.S3.length?g.type:0]),0,0,128,128,k.x-l/2,k.y-l/2,l,l)}d||s_$_c(this,b,c);if(s_oD(this,8)){for(c=s_b(this.Qa),d=c.next();!d.done;d=c.next()){g=b,d=d.value,e=d.uc.clone(),e.x=e.x*this.oa+this.oa/2,e.y=e.y*this.oa+this.oa/2,f=1.2*this.oa*(d.xo&&!this.Ia?g:1),d.xo||"NONE"===this.Da||(g=(d.NB+(this.Ia?0:g))/6,k= -g*Math.log2(g)-(1-g)*Math.log2(1-g),0===g&&(k=0),f*=1+k*this.dU,f=Math.round(f)),this.Ba.drawImage(s_P_c(this.O9b),128*d.type,0,128,128,e.x-f/2,e.y-f/2,f,f)}}s_oD(this,4)||s_a0c(this);c=s_b(this.Pc);for(d=c.next();!d.done;d=c.next()){k=d.value,d=new s_Nf(k.uc.x*this.oa+this.oa/2,k.uc.y*this.oa+this.oa/2),g=(k.NB+(this.Ia?0:b))/6,e=(Math.sin(g*Math.PI*2)+1)/2,0===g&&(e=0),f=.5*this.oa*(k.iX?Math.sqrt(1-b):1)*(k.xo?.3+.7*b:1),f=Math.round(f*(1+.4*e)),k=s_Vr(k.color),h=s_Wr(s_Yr(k,.15*e)),k=s_Wr(s_Yr(k,.05*(1-e))),this.La.fillStyle=h,this.La.beginPath(),this.La.arc(d.x,d.y,f,0,2*Math.PI),this.La.fill(),h=f/8*e,g=new s_Nf(h*Math.cos(2*g*Math.PI),h*Math.sin(2*g*Math.PI)),e=f*(.5+.25*e),this.La.fillStyle=k,this.La.beginPath(),this.La.arc(d.x+g.x,d.y+g.y,e,0,2*Math.PI),this.La.fill()}if(s_oD(this,1)||s_oD(this,8)){for(c=s_b(this.Ic),d=c.next();!d.done;d=c.next()){d=d.value,e=new s_Nf(d.uc.x*this.oa+this.oa/2,d.uc.y*this.oa+this.oa/2),f=this.oa*(d.xo?b:1),this.Ba.fillStyle="${settings.shadows}",this.Ba.fillRect(e.x-f/2,e.y-f/2,f,f),s_oD(this,8)&&this.Ba.drawImage(s_P_c(this.tib),128*d.UW,0,128,128,e.x-f/2,e.y-f/2,f,f)}}0<this.Eu&&(c=this.oa/30,d=Math.floor((this.xPa-this.Eu+b)/this.xPa*this.Du.oa)%this.Du.oa,e=new s_Nf(this.Dc.x*this.oa+this.oa/2,this.Dc.y*this.oa+this.oa/2),f=new s_Nf(-this.Du.zd(),-this.Du.Zc()/2),this.Du.render(d,e,f,this.wk,c),s_oD(this,7)&&this.Du.render(d,new s_Nf(this.Ba.canvas.width-e.x,this.Ba.canvas.height-e.y),f,this.wk+Math.PI,c));if(s_oD(this,8)){for(c=s_b(this.Jo),d=c.next();!d.done;d=c.next()){d=d.value,e=Math.round(d.uc.x+this.oa/2),f=Math.round(d.uc.y+this.oa/2),g=d.angle*Math.PI/180,this.Ba.save(),this.Ba.translate(e,f),this.Ba.rotate(g),e=Math.min(1,d.size),this.Ba.fillStyle="${settings.shadows}",this.Ba.fillRect(-(this.oa/2)*e,-(this.oa/2)*e,this.oa*e,this.oa*e),this.Ba.drawImage(s_P_c(this.tib),128*d.UW,0,128,128,-(this.oa/2)*e,-(this.oa/2)*e,this.oa*e,this.oa*e),this.Ba.restore()}}d=c=0;1<this.Ma&&(c=8*Math.random()-4,d=8*Math.random()-4);if(s_oD(this,4)){e=0===b;this.Oa.fillStyle="${settings.darkSquares}";this.Oa.fillRect(0,0,this.Oa.canvas.width,this.Oa.canvas.height);this.Oa.fillStyle="${settings.darkSquares}";b=new s_Nf(this.Oa.canvas.width/2%this.oa,this.Oa.canvas.height/2%this.oa);e=(e&&!this.Ia||this.Ia&&2<this.Ma)&&("LEFT"===this.Da||"UP"===this.Da);f=new s_Nf(this.xI.x%this.oa,this.xI.y%this.oa);for(g=-1;g<this.Aa.width+3;g+=1){for(k=-1;k<this.Aa.height+3;k+=1){Math.abs((g+k)%2)!==(this.EPa+(e?1:0))%2&&this.Oa.fillRect(g*this.oa-f.x+b.x,k*this.oa-f.y+b.y,this.oa,this.oa)}}this.Ba.restore();this.hb.clearRect(0,0,this.hb.canvas.width,this.hb.canvas.height);this.hb.drawImage(this.Ba.canvas,0,0);this.Ba.clearRect(0,0,this.Ba.canvas.width,this.Ba.canvas.height);b=Math.round(this.Ba.canvas.width/2-this.xI.x-2*this.oa);e=Math.round(this.Ba.canvas.height/2-this.xI.y-2*this.oa);f=2*this.oa;g=b>= -f;k=b<=f;h=e<=f;l=this.Aa.width*this.oa;m=this.Aa.height*this.oa;e>= -f&&(g&&this.Ba.drawImage(this.hb.canvas,b-l,e-m),k&&this.Ba.drawImage(this.hb.canvas,b+l,e-m),this.Ba.drawImage(this.hb.canvas,b,e-m));g&&this.Ba.drawImage(this.hb.canvas,b-l,e);k&&this.Ba.drawImage(this.hb.canvas,b+l,e);h&&(g&&this.Ba.drawImage(this.hb.canvas,b-l,e+m),k&&this.Ba.drawImage(this.hb.canvas,b+l,e+m),this.Ba.drawImage(this.hb.canvas,b,e+m));this.Ba.drawImage(this.hb.canvas,b,e);s_a0c(this);b=(this.Ba.canvas.width-this.Oa.canvas.width)/2;e=(this.Ba.canvas.height-this.Oa.canvas.height)/2;this.Oa.drawImage(this.La.canvas,c-b,d-e);this.Oa.drawImage(this.Ba.canvas,c-b,d-e)}else{b=(this.Oa.canvas.width-this.jf.canvas.width)/2,e=(this.Oa.canvas.height-this.jf.canvas.height)/2,this.jf.drawImage(this.Gk.canvas,c,d),this.jf.drawImage(this.La.canvas,c,d),this.jf.drawImage(this.Ba.canvas,c,d),this.Oa.drawImage(this.jf.canvas,b,e)}s_H(this.Pa("UEI8qf").el(),"visibility",this.H0a?"visible":"hidden");s_H(this.Pa("E5ziSe").el(),"visibility",this.H0a?"visible":"hidden");s_ng(this.Pa("A0kWCf").el(),this.Hb);s_ng(this.Pa("E5ziSe").el(),this.Of.has(s_3_c(this))?this.Of.get(s_3_c(this)):0);s_ng(this.Pa("LOtDEe").el(),this.Hb);s_ng(this.Pa("Vp6PHf").el(),this.Of.has(s_3_c(this,!0))?this.Of.get(s_3_c(this,!0)):0);if(this.xd){if(this.Qg){for(b=s_7h(this.Ea("akczce").el()),c=0<=this.Ca.IAa?s_b0c:new s_Nf(0,0),d=s_b(this.Ca.rows),e=d.next();!e.done;e=d.next()){e=e.value,f=s_Mh(e).x,g=this.Ca.IKa.get(e.id),this.Ca.h1.x>=c.x&&void 0!==g&&(f=.25*g+.75*f,g=s_Yh(e).width,k=b.width/2,s_Lh(e,Math.max(k-g,Math.min(k,f)),0))}}}else{s_c0c(this)}this.Ki&&(a=s_d0c(this.Ia&&0<this.Fu&&"NONE"!==this.Da?this.Fu*this.Ke:this.Sd*this.Ke+(a-this.Cg)),s_ng(this.Ea("yddQF").el(),a))}};`);
  document.body.bgColor = settings.background;
  document.body.getElementsByClassName('sEOCsb')[0].style.backgroundColor = settings.background;

}


window.snake.darkMode = function() {
	eval(`
		var s_N_c = function(a) {
			if(a.Ca == '00')
				a.wa.src = 'https://i.postimg.cc/w7f6jyZx/burger-00.png';
			if(a.Ca == '01')
				a.wa.src = 'https://i.postimg.cc/t7DbBnXd/burger-01.png';
			if(a.Ca == '02')
				a.wa.src = 'https://i.postimg.cc/cgSWbQgh/burger-02.png';
			if(a.Ca == '03')
				a.wa.src = 'https://i.postimg.cc/DSS7Jf3r/burger-03.png';
			if(a.Ca == '04')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '05')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '06')
				a.wa.src = 'https://i.postimg.cc/QKN3XhqW/burger-06.png';
			if(a.Ca == '07')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '08')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '09')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '10')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '11')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '12')
				a.wa.src = 'https://i.postimg.cc/DSS7Jf3r/burger-03.png';
			if(a.Ca == '13')
				a.wa.src = 'https://i.postimg.cc/w7f6jyZx/burger-00.png';

			s_Ig(a.wa, "load", function() {
				a.Ba = !0;
				s_O_c(a)
			})
		}
	`);

	eval(`
	var s_mD = function(a, b, c) {
		this.wa = new Image;
		this.wa.crossOrigin = "Anyonymous";
		this.Ba = !1;
		this.oa = b;
		this.Ca = a;
		this.Aa = c;
		this.ka = document.createElement("canvas").getContext("2d");
		s_N_c(this)
	}
		, s_N_c = function(a) {
			if(a.Ca == '00')
				a.wa.src = 'https://i.postimg.cc/w7f6jyZx/burger-00.png';
			if(a.Ca == '01')
				a.wa.src = 'https://i.postimg.cc/t7DbBnXd/burger-01.png';
			if(a.Ca == '02')
				a.wa.src = 'https://i.postimg.cc/cgSWbQgh/burger-02.png';
			if(a.Ca == '03')
				a.wa.src = 'https://i.postimg.cc/DSS7Jf3r/burger-03.png';
			if(a.Ca == '04')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '05')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '06')
				a.wa.src = 'https://i.postimg.cc/QKN3XhqW/burger-06.png';
			if(a.Ca == '07')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '08')
				a.wa.src = 'https://i.postimg.cc/yJ9BjfdW/burger-05.png';
			if(a.Ca == '09')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '10')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '11')
				a.wa.src = 'https://i.postimg.cc/BjR4xWJd/burger-04.png';
			if(a.Ca == '12')
				a.wa.src = 'https://i.postimg.cc/DSS7Jf3r/burger-03.png';
			if(a.Ca == '13')
				a.wa.src = 'https://i.postimg.cc/w7f6jyZx/burger-00.png';

			s_Ig(a.wa, "load", function() {
				a.Ba = !0;
				s_O_c(a)
			})
		}
		, s_O_c = function(a) {
			a.ka.canvas.width = a.wa.width;
			a.ka.canvas.height = a.wa.height;
			a.ka.clearRect(0, 0, a.ka.canvas.width, a.ka.canvas.height);
			a.ka.drawImage(a.wa, 0, 0)
	}
		, s_nD = function(a, b, c) {
			if (a.Ba) {
					s_O_c(a);
					b = s_6sb(b);
					c = s_6sb(c);
					b = 0 === b[2] ? 1 : c[2] / b[2];
					for (var d = a.ka.getImageData(0, 0, a.ka.canvas.width, a.ka.canvas.height), e = d.data, f = 0; f < e.length; f += 4)
							if (0 < e[f + 3]) {
									var g = s_3sb(e[f], e[f + 1], e[f + 2]);
									1 > g[2] && (g[0] = c[0],
									g[1] = c[1],
									g[2] *= b);
									g = s_5sb(g[0], g[1], g[2]);
									e[f] = g[0];
									e[f + 1] = g[1];
									e[f + 2] = g[2]
							}
					a.ka.putImageData(d, 0, 0)
			}
	};
	`);
}/*custom menu*/
javascript: req = new XMLHttpRequest(); req.open('GET', 'https://raw.githubusercontent.com/DarkSnakeGang/GoogleSnakeCustomMenuStuff/main/custom.js'); req.onload = function() { eval(this.responseText + 'snake.more_menu();'); }; req.send();
/*start of color menu*/
let animateSnakeGlobals = {
  startPlayback: false,
  startingTime: 0,
  framesPerSecond: 40,
  frameDoneSoFar: 0,
  currentColourArray: ["#FFFFFF","#000000"],
  cacheMode: false,
  cache: [],
  currentPatternString:"none",
  isPatternDisabled:false,
  currentBackgroundPatternString:"none",
  isBackgroundPatternDisabled:false,
};

/*Change to false when releasing - turns on console.log printing*/
let animatedSnakeModDebug = false;

window.snake.animate = function(){
  injectInitialHtmlAnimatedSnake();
  setupEventListenersAnimatedSnake();

  /*Set up default pattern to use (If I change this then I also need to change "selected" in the html)*/
  changePatterns("rollingRainbowRev","none");

  const scripts = document.body.getElementsByTagName('script');
    for(let script of scripts) {
      if(script.src == "" || script.src.indexOf('apis.google.com') != -1){
        continue;
      }
      const req = new XMLHttpRequest();
      req.open('GET', script.src);
      req.onload = function() {
        if(this.responseText.indexOf('trophy') !== -1)
          processCode(this.responseText);
      };
      req.send();
    }
};

function processCode(code) {
  /*find the name of the variable representing how many turns the snake has been alive for*/
  let lifetime = "a.ticks";
  animatedSnakeModDebug && console.log(lifetime);

  /*find names of variables with snake eyes/tongue etc*/

  let [, headColour, blinkImg, eatImg, dieImg] = code.match(/([$a-zA-Z0-9_]{0,6})=b\[0\],\n?this\.[$a-zA-Z0-9_]{0,6}=b\[1\],\n?[$a-zA-Z0-9_]{0,6}\(this\.([$a-zA-Z0-9_]{0,6}),"#5282F2",this\.[$a-zA-Z0-9_]{0,6}\),\n?[$a-zA-Z0-9_]{0,6}\(this\.([$a-zA-Z0-9_]{0,6}),"#5282F2",this\.[$a-zA-Z0-9_]{0,6}\),\n?[$a-zA-Z0-9_]{0,6}\(this.([$a-zA-Z0-9_]{0,6}),"#5282F2",\n?this.[$a-zA-Z0-9_]{0,6}\)/);
  let [, colourChangeFunc, snakeTongue, func2, func3] = code.match(/([$a-zA-Z0-9_]{0,6})\(this\.([$a-zA-Z0-9_]{0,6}),"#C73104",([$a-zA-Z0-9_]{0,6})\(([$a-zA-Z0-9_]{0,6})\(/);
  let hueFunc = code.match(/([$a-zA-Z0-9_]{0,6})\("#C73104"\)\,[$a-zA-Z0-9_]{0,6}\[0\]=\([$a-zA-Z0-9_]{0,6}\[0\]\+180/)[1];

  animatedSnakeModDebug && console.log(`${headColour},${blinkImg},${eatImg},${dieImg},${colourChangeFunc},${snakeTongue}`);
  /*grab code for the function we need to hijack*/
  let snakeColourFunction = findFunctionInCode(code,
    /[$a-zA-Z0-9_]{0,6}=function\(a,b,c,d,e\)$/,
    /a\.[$a-zA-Z0-9_]{0,6}&&10!==a\.[$a-zA-Z0-9_]{0,6}/,
    animatedSnakeModDebug);
  
  let updateHeadCode = `function updateHeadColour(a, headColour) {
    a.${headColour} = headColour;
    ${colourChangeFunc}(a.${blinkImg}, "#5282F2", headColour);/*Set blink image colours*/
    ${colourChangeFunc}(a.${eatImg}, "#5282F2", headColour);/*Set Eat image colours*/
    ${colourChangeFunc}(a.${dieImg}, "#000000", headColour);/*Set Die image colours*/
    var hue = ${hueFunc}(headColour);
    var b = ${hueFunc}("#C73104");
    b[0] = (hue[0] + 180) % 360;
    ${colourChangeFunc}(a.${snakeTongue}, "#C73104", ${func2}(${func3}(b[0], b[1], b[2])))/*Hue rotate to get tongue colour*/
  }`;

  eval(updateHeadCode);
  
  /*need to change a bit of code so that the head can change colour even for the rainbow snake*/
  let regex1 = /0===this\.[$a-zA-Z0-9_]{0,6}\|\|10===this\.[$a-zA-Z0-9_]{0,6}/;
  let func1 = findFunctionInCode(code,/[$a-zA-Z0-9_]{0,6}\.prototype\.[$a-zA-Z0-9_]{0,6}=function\(\)$/,regex1,animatedSnakeModDebug);
  func1 = assertReplace(func1,/\|\|10===this\.[$a-zA-Z0-9_]{0,6}/,"|| false");
  eval(func1);

  /* Enable caching */
  setupCaching(code);

  /* Background colour stuff */
  let [,rectangle,miniCanvas,tileLength] = code.match(/([$a-zA-Z0-9_]{0,6})\.height;d\+\+\)0!==\n?\(c\+d\)%2&&\(a\.([$a-zA-Z0-9_]{0,6})\.fillStyle="#a2d149",a\.[$a-zA-Z0-9_]{0,6}\.fillRect\(c\*a\.([$a-zA-Z0-9_]{0,6})/);

  let updateBackgroundFunc = `function updateBackground(a, frameNum) {
    if(animateSnakeGlobals.isBackgroundPatternDisabled) {
      return;
    }
    for (c = 0; c < a.${rectangle}.width; c++) {
      for (d = 0; d < a.${rectangle}.height; d++) {
        a.${miniCanvas}.fillStyle = getColourArrayFromCurrentBackgroundPattern(a, frameNum, c, d);
        a.${miniCanvas}.fillRect(c * a.${tileLength}, d * a.${tileLength}, a.${tileLength}, a.${tileLength});
      }
    }
  }`;
  animatedSnakeModDebug && console.log(updateBackgroundFunc);
  eval(updateBackgroundFunc);

  /* Use a safer shadow colour */
  eval(
    code.match(
      /[a-zA-Z0-9_$]{1,6}=function\(a\){a\.[a-zA-Z0-9_$]{1,6}\.globalCompositeOperation[^}]*"source-over"}/
    )[0].replace(
      /#94BD46/g,
      "#555555"
    )
  );

  let resetAnimationCode = `if(${lifetime} == 0) {
    animateSnakeGlobals.startPlayback = true;
    animateSnakeGlobals.startingTime = performance.now();
  }`;

  snakeColourFunction = assertReplace(snakeColourFunction,"{", "{" + resetAnimationCode);

  /*$& has a special meaning in replace()*/
  let hijackArrayCode = `if(animateSnakeGlobals.startPlayback) {
    var frameNum = Math.floor((performance.now() + (0.5*1000/animateSnakeGlobals.framesPerSecond)
     - animateSnakeGlobals.startingTime)/(1000/animateSnakeGlobals.framesPerSecond));
    
    if(frameNum !== animateSnakeGlobals.frameDoneSoFar) {
      animateSnakeGlobals.frameDoneSoFar = frameNum;

      if(!animateSnakeGlobals.isPatternDisabled) {
        animateSnakeGlobals.currentColourArray = getColourArrayFromCurrentPattern(frameNum);
        updateHeadColour(a, animateSnakeGlobals.currentColourArray[0]);
      }
      updateBackground(a, frameNum);
    }
      var g = animateSnakeGlobals.currentColourArray;
  }
  else {
    $&
  }`;
  snakeColourFunction = assertReplace(snakeColourFunction,/var g=e\?[$a-zA-Z0-9_]{0,6}:[$a-zA-Z0-9_]{0,6};/, hijackArrayCode);
  
  animatedSnakeModDebug && console.log(snakeColourFunction);
  eval(snakeColourFunction);
}

function getColourArrayFromCurrentPattern(frameNum) {
  return window[animateSnakeGlobals.currentPatternString](frameNum);
}

function getColourArrayFromCurrentBackgroundPattern(a, frameNum, c, d) {
  return window[animateSnakeGlobals.currentBackgroundPatternString](a, frameNum, c, d);
}

function changePatterns(pattern, backgroundPattern) {
  /*pattern is a string which contains the name of a function that takes a frame number (60fps) and returns an array with all the hex colours along the snake's body*/
  animateSnakeGlobals.currentPatternString = pattern;
  animateSnakeGlobals.currentBackgroundPatternString = backgroundPattern;

  /*Can we cache the images for snake's head?*/
  animateSnakeGlobals.cacheMode = ["temporalRainbow", "rollingRainbow", "rollingRainbowRev", "none"].includes(pattern);
  if(pattern.startsWith('singleColourFunctionCreator')) {
    animateSnakeGlobals.cacheMode = true;
  }

  //Show laggy notice if we aren't caching
  let lagNotice = document.getElementById('lag-notice');
  lagNotice.style.display = (animateSnakeGlobals.cacheMode ? 'none' : 'inline');

  //Turn off patterns if we don't want them
  animateSnakeGlobals.isPatternDisabled = (pattern === "none");
  animateSnakeGlobals.isBackgroundPatternDisabled = (backgroundPattern === "none");
}

function changeFrameRate(newFrameRate) {
  let frameRate = parseFloat(newFrameRate);
  if(isNaN(frameRate)) {
    return false;
  }
  if(frameRate < 0.00001) {
    return false;
  }
  if(frameRate > 60) {
    if(confirm('This Frame Rate Might Be Buggy / Laggy!')) {
      setFrameRate(frameRate);
    } else {
      return false;
    }
  }
  setFrameRate(frameRate);
}

function setFrameRate(frameRate) {
  /*set new frameRate*/
  animateSnakeGlobals.framesPerSecond = frameRate;
  document.getElementById('current-frame-rate').textContent = frameRate;
}

function setupCaching(code) {
  let recolourImageFunction = findFunctionInCode(code,
    /[$a-zA-Z0-9_]{0,6}=function\(a,b,c,d\)$/,
    /putImageData/,
    animatedSnakeModDebug);
  let canvasContext = recolourImageFunction.match(/a\.([$a-zA-Z0-9_]{0,6})\.putImageData/)[1];

  recolourImageFunction = assertReplace(recolourImageFunction,/a\.([$a-zA-Z0-9_]{0,6})\.putImageData\(([$a-zA-Z0-9_]{0,6}),0,0\)/,
  `if(animateSnakeGlobals.cacheMode) animateSnakeGlobals.cache[a.path + hex] = f;
    a.$1.putImageData($2, 0, 0);
  }`);
  
  /*Order is important, as the previous bit needs to match on the correct putImageData*/
  recolourImageFunction = assertReplace(recolourImageFunction,"if(a.loaded){",
  `var hex = c;
  if(a.loaded){
    if(animateSnakeGlobals.cacheMode && (a.path + hex) in animateSnakeGlobals.cache) {
      a.${canvasContext}.putImageData(animateSnakeGlobals.cache[a.path + hex], 0, 0)
    }
    else {`);
  animatedSnakeModDebug && console.log(recolourImageFunction);
  eval(recolourImageFunction);
}

function injectInitialHtmlAnimatedSnake() {
  let initialHtml = 
  `<div id="animated-snake-popup" style="margin:0px;position:fixed;z-index:9011;width:100%;">
  <div style="width:300px;padding:10px;background-color:#373629;z-index:9012;border-color:black;border-style:solid;border-width:2px;;box-shadow: 0 3px 10px rgba(0,0,0,0.5);position:fixed;right:5px;top:5px">
      <div class="font-effect-fire" style="text-align:center;padding:2px;background-color:transparent;font-family:sofia;font-size:25px">Animated Colors Menu</div>
      <div style="background-color:#555543;margin-top:5px;padding:0px;padding-bottom:10px;font-family:calibri;color:#FFFFFF;">
        <div style="margin:auto;padding:3px">
          <p style="margin-top:0">You'll Need To Put On The Rainbow Snake Color For This Mod To Work.<span style="color:red;"> Warning There Is Flashing Lights!</span></p>
          Snake Pattern
          <br>
          <select id="snake-pattern-chooser">
            <option value="none">none</option>
            <option value="defaultPattern">defaultPattern</option>
            <option value="seizure">seizure</option>
            <option value="temporalRainbow">temporalRainbow</option>
            <option value="rollingRainbow">rollingRainbow</option>
            <option value="rollingRainbowRev" selected="">rollingRainbowRev</option>
            <option value="strobeRainbow">strobeRainbow</option>
            <option value="variation">variation</option>
            <option value="variationV2">variationV2</option>
          </select>
          <span id="lag-notice" style="display:none;font-size:0.7em">(Might Be Laggy)</span>
        </div>
        <div style="margin:auto;padding:3px">
          Background Pattern
          <br>
          <select id="background-pattern-chooser">
            <option value="none" selected="">none</option>
            <option value="randomHexBg">randomHexBg</option>
            <option value="randomHexSameBg">randomHexSameBg</option>
            <option value="temporalBg">temporalBg</option>
            <option value="rollingRainbowBg">rollingRainbowBg</option>
            <option value="rollingRainbowBgOld">rollingRainbowBgOld</option>
          </select>
        </div>
        <div style="margin:auto;padding:3px">
        FrameRate / FPS <input id="frame-rate" type="text" size="3" value="40"><span> | Current Frames: <span id="current-frame-rate">40</span></span>
        </div>
        <div style="margin:auto;padding:3px">
        <button id="update-pattern" style="text-align:center;">Update FrameRate / FPS</button>
        </div>
        <div style="text-align:center;"><a id="animated-snake-close" href="#">Close</a> (J To Re-Show The GUI)</div>
      </div>
  </div>
</div>
`;

  let intialElement = document.createElement('div');
  intialElement.style.backgroundColor = 'transparent';
  intialElement.style.position = 'fixed';
  intialElement.style.zIndex = '9011';
  intialElement.innerHTML = initialHtml;

  document.getElementsByTagName('body')[0].prepend(intialElement);

  //Also inject css stylesheet needed for fire font
  let linkEl = document.createElement('link');
  linkEl.rel = 'stylesheet';
  linkEl.href = 'https://fonts.googleapis.com/css?family=Sofia&effect=fire';
  document.head.appendChild(linkEl);
};

function setupEventListenersAnimatedSnake() {
  document.getElementById('animated-snake-close').onclick = function() {
    document.getElementById('animated-snake-popup').hidden = true;
  };

  document.addEventListener('keydown',function(event) {
    if(event.key == 'j') {
      document.getElementById('animated-snake-popup').hidden = !document.getElementById('animated-snake-popup').hidden;
    }
  });

  document.getElementById('snake-pattern-chooser').onchange = function() {
    changePatterns(this.value,animateSnakeGlobals.currentBackgroundPatternString);
  }

  document.getElementById('background-pattern-chooser').onchange = function() {
    changePatterns(animateSnakeGlobals.currentPatternString, this.value);
  }

  document.getElementById('update-pattern').onclick = function() {
    changeFrameRate(document.getElementById('frame-rate').value);
  }

  document.getElementById('frame-rate').onkeyup = function(e) {
    if(e.key === 'Enter') {
      changeFrameRate(document.getElementById('frame-rate').value);
    }
  }
}

/*
This function will search for a function/method in some code and return this function as a string

code will usually be the snake source code

functionSignature will be regex matching the beginning of the function/method (must end in $),
for example if we are trying to find a function like s_xD = function(a, b, c, d, e) {......}
then put functionSignature = /[$a-zA-Z0-9_]{0,6}=function(a,b,c,d,e)$/

somethingInsideFunction will be regex matching something in the function
for example if we are trying to find a function like s_xD = function(a, b, c, d, e) {...a.Xa&&10!==a.Qb...}
then put somethingInsideFunction = /a\.[$a-zA-Z0-9_]{0,6}&&10!==a\.[$a-zA-Z0-9_]{0,6}/

levelsToGoUp tells us how many "layers" of curly brackets we need to go up before we get to our function

*/
function findFunctionInCode(code, functionSignature, somethingInsideFunction, logging = false) {
  /*Check functionSignature ends in $*/
  if(functionSignature.toString()[functionSignature.toString().length-2] !== "$") {
    throw new Error("functionSignature regex should end in $");
  }

  /*get the position of somethingInsideFunction*/
  let indexWithinFunction = code.search(somethingInsideFunction);
  if(indexWithinFunction == -1) {
    throw new Error("couldn't find a match for somethingInsideFunction");
  }

  /*expand outwards from somethingInsideFunction until we get to the function signature, then count brackets
  to find the end of the function*/
  startIndex = 0;
  for(let i = indexWithinFunction; i >= 0; i--) {
    let startOfCode = code.substring(0,i);
    startIndex = startOfCode.search(functionSignature);
    if(startIndex !== -1) {
      break;
    }
    if(i == 0) {
      throw new Error("Couldn't find function signature");
    }
  }

  let bracketCount = 0;
  let foundFirstBracket = false;
  let endIndex = 0;
  /*Use bracket counting to find the whole function*/
  let codeLength = code.length;
  for(let i = startIndex; i<=codeLength; i++){
    if(!foundFirstBracket && code[i] == "{") {
      foundFirstBracket = true;
    }

    if(code[i] == "{") {
      bracketCount++;
    }
    if(code[i] == "}") {
      bracketCount--;
    }
    if(foundFirstBracket && bracketCount == 0) {
      endIndex = i;
      break;
    }

    if(i == codeLength) {
      throw new Error("Couldn't pair up brackets");
    }
  }
  
  let fullFunction = code.substring(startIndex,endIndex + 1);

  /*throw error if fullFunction doesn't contain something inside function - i.e. function signature was wrong*/
  if(fullFunction.search(somethingInsideFunction) === -1) {
    throw new Error("Function signature does not belong to the same function as somethingInsideFunction");
  }

  if(logging) {
    console.log(fullFunction);
  }

  return fullFunction;
}

/*
Same as replace, but throws an error if nothing is changed
*/
function assertReplace(baseText, regex, replacement) {
  if(typeof baseText !== 'string') {
    throw new Error('String argument expected for assertReplace');
  }
  let outputText = baseText.replace(regex, replacement);

  if(baseText === outputText) {
    throw new Error('Failed to make any changes with replace');
  }

  return outputText;
}

/*
Same as replaceAll, but throws an error if nothing is changed
*/
function assertReplaceAll(baseText, regex, replacement) {
  if(typeof baseText !== 'string') {
    throw new Error('String argument expected for assertReplace');
  }
  let outputText = baseText.replaceAll(regex, replacement);

  if(baseText === outputText) {
    throw new Error('Failed to make any changes with replace');
  }

  return outputText;
}

/*below are custom patterns*/
function defaultPattern(frameNum) {
  let colourArray = [];

  let randColour = "#";
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
  for(let i = 0; i<504; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
}

function seizure(frameNum) {
  let colourArray = [];
  let randr = Math.floor(256*Math.random());
  let randg = Math.floor(256*Math.random());
  let randb = Math.floor(256*Math.random());
  let randColour = rgbToHex(randr,randg,randb);
  for(let i = 0; i<10; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
} 

function temporalRainbow(frameNum) {
  let colourArray = [];
  let hue = (frameNum % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
  for(let i = 0; i<10; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
}

function rollingRainbow(frameNum) {
  let colourArray = [];  
  for(let i = 0; i<30; i++) {
    let hue = ((frameNum + i*2) % 60)/60;
    let randColour = hsvToRgb(hue,1,1);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
    colourArray[i] = randColour;
  }
  return colourArray;
}

function rollingRainbowRev(frameNum) {
  let colourArray = [];  
  for(let i = 0; i<30; i++) {
    let hue = ((frameNum - i*2 + 60) % 60)/60;
    let randColour = hsvToRgb(hue,1,1);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
    colourArray[i] = randColour;
  }
  return colourArray;
}

/*note works best on lower fps*/
/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var strobeRainbow = (function() {
  let colorsSplashes = [];
  function strobeRainbow(frameNum) {
    /*add new splashes of colour at random*/
    if(Math.random() < 0.2) {
      let splashColour = hsvToRgb(Math.random(),1,1);
      splashColour = [Math.floor(splashColour[0]),Math.floor(splashColour[1]),Math.floor(splashColour[2])];
      colorsSplashes.push({rgb: splashColour, position: 50, spread: 3});
    }

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<50; i++) {
      let colourTotal = [255,255,255]; /*base colour is white*/
      let weight = 0.1;
      for(let splash of colorsSplashes) {
        if(Math.abs(splash.position - i) <= splash.spread) {
          let splashWeight = 1/(Math.abs(splash.position - i) + 1); 
          colourTotal = [colourTotal[0] + splashWeight*splash.rgb[0],colourTotal[1] + splashWeight*splash.rgb[1],colourTotal[2] + splashWeight*splash.rgb[2]];
          weight += splashWeight;
        }
      }
      colourArray[i] = rgbToHex(Math.floor(colourTotal[0]/weight),Math.floor(colourTotal[1]/weight),Math.floor(colourTotal[2]/weight));
    }

    /* Move splashes along body. Increase spread if they hit 0 */
    for(let i = 0; i < colorsSplashes.length; i++) {
      if(colorsSplashes[i].position > 0) {
        colorsSplashes[i].position--;
      } else {
        colorsSplashes[i].spread++;
        if(colorsSplashes[i].spread > 5 + Math.floor(4*Math.random())) {
          colorsSplashes.splice(i,1);
        }
      }
    }
    return colourArray;
  }
  return strobeRainbow;
})();

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var variation = (function() {
  /*specify all colours in hsv*/
  let colorsSplashes = [];
  let baseColour = [0.3,1,1];
  let patternLength = 50;
  function variation(frameNum) {
    /*add new splashes of colour at random*/
    /*if(Math.random() < 0.6) {*/
      let splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
    /*}*/

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<patternLength; i++) {
      let weight = 0.1;
      let hsvTotal = [baseColour[0]*weight,baseColour[1]*weight,baseColour[2]*weight];
      for(let splash of colorsSplashes) {
        if(Math.abs(splash.position - i) <= splash.spread) {
          let splashWeight = splash.weightMultiplier*(1/(Math.abs(splash.position - i) + 1)); 
          hsvTotal = [hsvTotal[0] + splashWeight*splash.hsv[0],hsvTotal[1] + splashWeight*splash.hsv[1],hsvTotal[2] + splashWeight*splash.hsv[2]];
          weight += splashWeight;
        }
      }
      
      /*Adjust vibrance to fade in/out*/
      
      hsvColour = [hsvTotal[0]/weight,hsvTotal[1]/weight,hsvTotal[2]/weight];
      hsvColour[2] = 0.85+0.15*Math.sin(2*Math.PI*frameNum/120);

      let segmentColour = hsvToRgb(...hsvColour);
      colourArray[i] = rgbToHex(Math.floor(segmentColour[0]),Math.floor(segmentColour[1]),Math.floor(segmentColour[2]));
    }

    /* Move splashes around. Increase spread at random */
    for(let i = 0; i < colorsSplashes.length; i++) {
      
        colorsSplashes[i].position += Math.random() - 0.5;
        colorsSplashes[i].position = Math.min(colorsSplashes[i].position, patternLength - 1);
        colorsSplashes[i].position = Math.max(colorsSplashes[i].position, 0);

        if(colorsSplashes[i].aliveTime < 15) {
          colorsSplashes[i].weightMultiplier += 0.08;
        } else {
          colorsSplashes[i].weightMultiplier -= 0.08;
        }

        colorsSplashes[i].spread += Math.random() - 0.5;
        colorsSplashes[i].spread = Math.max(colorsSplashes[i].spread, 1);

        colorsSplashes[i].aliveTime++;
        if(colorsSplashes[i].aliveTime > 30) {
          colorsSplashes.splice(i,1);
        }
    }
    return colourArray;
  }
  return variation;
})();

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var variationV2 = (function() {
  /*specify all colours in hsv*/
  let baseColour = [0,1,1];
  const patternLength = 50;
  const totalWaveCount = 10;
  let waves = [];

  for(let i = 0; i < totalWaveCount; i++) {
    waves.push({weight: 0.15*Math.random(),
      bias: patternLength*Math.random(),
      wavelength: i + 1,
      period: 240*Math.random() + 1,
      timeBias: 240*Math.random()})
  }

  function variationV2(frameNum) {

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<patternLength; i++) {
      let hue = baseColour[0];
      for(let j = 0; j<totalWaveCount;j++) {
        hue += waves[j].weight*Math.sin(2*Math.PI*(1/waves[j].wavelength)*(i+waves[j].bias))
        * Math.sin(2*Math.PI*(1/waves[j].period)*(frameNum+waves[j].timeBias));
      }
      hue = hue % 1 + 1;
      let saturation = 1;
      let vibrance = 0.85+0.15*Math.sin(2*Math.PI*frameNum/120);
      let colour = hsvToRgb(hue,saturation,vibrance);
      colour = [Math.floor(colour[0]),Math.floor(colour[1]),Math.floor(colour[2])];
      let hexColour = rgbToHex(...colour);
      colourArray[i] = hexColour;
    }
    return colourArray;
  }
  return variationV2;
})();

function singleColourFunctionCreator(hexcode) {
  if(!/^#[0-9a-f]{6}$/i.test(hexcode)) {
    hexcode = '#ffffff';
  }
  function singleColour() {
    let colourArray = [];
    for(let i = 0; i<10; i++) {
      colourArray[i] = hexcode;
    }
    return colourArray;
  }
  
  return singleColour;
}

/* Below are custom backgrounds */
function randomHexBg(a, frameNum, x, y) {
  let randColour = "#";
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  return randColour;
}

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var randomHexSameBg = (function() {
  let currentFrameNum = 0;
  let currentColour = "#FFFFFF";
  return function (a, frameNum, x, y) {
    if(frameNum !== currentFrameNum) {
      currentFrameNum = frameNum;
      currentColour = "#";
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
    }
    return currentColour;
  };
})();

function temporalBg(a, frameNum, x, y) {
  let hue = (frameNum % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
  return randColour;
}

function rollingRainbowBg(a, frameNum, x, y) { 
    let hue = ((frameNum + (x+y)*2) % 60)/60;
    let saturation = 0.62;
    let vibrance = 0.84;
    if((x + y) % 2 === 1) {
      saturation += 0.13;
      vibrance -= 0.13;
    }
    let randColour = hsvToRgb(hue,saturation,vibrance);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
  return randColour;
}

function rollingRainbowBgOld(a, frameNum, x, y) { 
  let hue = ((frameNum + (x+y)*2) % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
return randColour;
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
 function rgbToHsv(r, g, b) {
  r /= 255, g /= 255, b /= 255;

  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, v = max;

  var d = max - min;
  s = max == 0 ? 0 : d / max;

  if (max == min) {
    h = 0; /* achromatic */
  } else {
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }

    h /= 6;
  }

  return [ h, s, v ];
}

/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb(h, s, v) {
  var r, g, b;

  var i = Math.floor(h * 6);
  var f = h * 6 - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);

  switch (i % 6) {
    case 0: r = v, g = t, b = p; break;
    case 1: r = q, g = v, b = p; break;
    case 2: r = p, g = v, b = t; break;
    case 3: r = p, g = q, b = v; break;
    case 4: r = t, g = p, b = v; break;
    case 5: r = v, g = p, b = q; break;
  }

  return [ r * 255, g * 255, b * 255 ];
}

window.snake.animate();
