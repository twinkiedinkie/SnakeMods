/*time mode*/
var %24jscomp%3D%24jscomp%7C%7C%7B%7D%3B%24jscomp.scope%3D%7B%7D%3B%24jscomp.arrayIteratorImpl%3Dfunction(b)%7Bvar a%3D0%3Breturn function()%7Breturn a<b.length%3F%7Bdone%3A!1%2Cvalue%3Ab%5Ba%2B%2B%5D%7D%3A%7Bdone%3A!0%7D%7D%7D%3B%24jscomp.arrayIterator%3Dfunction(b)%7Breturn%7Bnext%3A%24jscomp.arrayIteratorImpl(b)%7D%7D%3B%24jscomp.makeIterator%3Dfunction(b)%7Bvar a%3D"undefined"!%3Dtypeof Symbol%26%26Symbol.iterator%26%26b%5BSymbol.iterator%5D%3Breturn a%3Fa.call(b)%3A%24jscomp.arrayIterator(b)%7D%3Bwindow.snake.timeKeeper%3D%7B%7D%3Bwindow.snake.timeKeeper.gotApple%3Dfunction(b%2Ca)%7Bwindow.snake.timeKeeper.lastAppleDate%3Dnew Date%3Bwindow.snake.timeKeeper.lastAppleTime%3Db%3B25!%3Da%26%2650!%3Da%26%26100!%3Da%7C%7Cwindow.snake.timeKeeper.savePB(b%2Ca%2Cwindow.snake.timeKeeper.mode%2Cwindow.snake.timeKeeper.count%2Cwindow.snake.timeKeeper.speed%2Cwindow.snake.timeKeeper.size)%7D%3Bwindow.snake.timeKeeper.gotAll%3Dfunction(b%2Ca)%7Bwindow.snake.timeKeeper.savePB(b%2C"ALL"%2Cwindow.snake.timeKeeper.mode%2Cwindow.snake.timeKeeper.count%2Cwindow.snake.timeKeeper.speed%2Cwindow.snake.timeKeeper.size)%7D%3Bwindow.snake.timeKeeper.death%3Dfunction(b%2Ca)%7Bwindow.snake.timeKeeper.playing%26%26(window.snake.timeKeeper.playing%3D!1%2Cwindow.snake.timeKeeper.saveScore(b%2Ca%2Cwindow.snake.timeKeeper.mode%2Cwindow.snake.timeKeeper.count%2Cwindow.snake.timeKeeper.speed%2Cwindow.snake.timeKeeper.size))%7D%3Bwindow.snake.timeKeeper.start%3Dfunction()%7Bwindow.snake.timeKeeper.playing%3D!0%3Bwindow.snake.timeKeeper.mode%3Dwindow.snake.timeKeeper.getCurrentMode()%3Bwindow.snake.timeKeeper.count%3Dwindow.snake.timeKeeper.getCurrentSetting("count")%3Bwindow.snake.timeKeeper.speed%3Dwindow.snake.timeKeeper.getCurrentSetting("speed")%3Bwindow.snake.timeKeeper.size%3Dwindow.snake.timeKeeper.getCurrentSetting("size")%3Bwindow.snake.timeKeeper.addAttempt(window.snake.timeKeeper.mode%2Cwindow.snake.timeKeeper.count%2Cwindow.snake.timeKeeper.speed%2Cwindow.snake.timeKeeper.size)%7D%3Bwindow.snake.timeKeeper.getCurrentMode%3Dfunction()%7Belement%3D""%3Bfor(var b%3D%24jscomp.makeIterator(document.querySelectorAll("img"))%2Ca%3Db.next()%3B!a.done%3Ba%3Db.next())i%3Da.value%2Ci.src.includes("random.png")%26%26(element%3Di)%3Bcounter%3D-1%3BmodeStr%3D""%3Bb%3D%24jscomp.makeIterator(element.parentElement.parentElement.parentElement.children)%3Bfor(a%3Db.next()%3B!a.done%3Ba%3Db.next())child%3Da.value%2Ccounter%2B%2B%2C0!%3Dcounter%26%26(modeStr%3D1<child.firstChild.classList.length%26%260<child.firstChild.children.length%3FmodeStr%2B"1"%3AmodeStr%2B"0")%3Bb%3Dwindow.snake.timeKeeper.getCurrentSetting("trophy")%3Bif(b!%3Ddocument.getElementById("trophy").children.length-1)for(modeStr%3D""%2Ct%3D1%3B15>%3Dt%3Bt%2B%2B)modeStr%3Dt%3D%3Db%3FmodeStr%2B"1"%3AmodeStr%2B"0"%3Breturn modeStr%7D%3Bwindow.snake.timeKeeper.getCurrentSetting%3Dfunction(b)%7Ba%3A%7Bvar a%3Ddocument.getElementById(b)%3Bb%3D0%3Bfor(var c%3D%5B%5D%2Cf%3D""%2Ce%3D%24jscomp.makeIterator(a.children)%2Cg%3De.next()%3B!g.done%3Bg%3De.next())if(element%3Dg.value%2C-1%3D%3Dc.indexOf(element.className))c.push(element.className)%3Belse%7Bf%3Delement.className%3Bbreak%7Da%3D%24jscomp.makeIterator(a.children)%3Bfor(g%3Da.next()%3B!g.done%3Bg%3Da.next())%7Belement%3Dg.value%3Bif(element.className!%3Df)break a%3Bb%2B%2B%7Db%3D0%7Dreturn b%7D%3Bwindow.snake.timeKeeper.saveScore%3Dfunction(b%2Ca%2Cc%2Cf%2Ce%2Cg)%7B"undefined"%3D%3Dtypeof window.snake.timeKeeper.lastAppleDate%26%26(window.snake.timeKeeper.lastAppleDate%3Dnew Date)%3B"undefined"%3D%3Dtypeof window.snake.timeKeeper.lastAppleTime%26%26(window.snake.timeKeeper.lastAppleTime%3Db)%3Bb%3DMath.floor(b)%3Bvar d%3DlocalStorage.getItem("snake_timeKeeper")%3Bd%3DJSON.parse(d)%3Bc%3D"H-"%2Bc%2B"-"%2Bf%2B"-"%2Be%2B"-"%2Bg%3Bif("undefined"%3D%3Dtypeof d%5Bc%5D)d%5Bc%5D%3D%7Bhigh%3Aa%2Ctime%3Awindow.snake.timeKeeper.lastAppleTime%2Cdate%3Awindow.snake.timeKeeper.lastAppleDate%2Csum%3Aa%7D%3Belse if(d%5Bc%5D.sum%2B%3Da%2Ca>d%5Bc%5D.high%7C%7Ca%3D%3Dd%5Bc%5D.high%26%26b<d%5Bc%5D.time)d%5Bc%5D.high%3Da%2Cd%5Bc%5D.time%3Dwindow.snake.timeKeeper.lastAppleTime%2Cd%5Bc%5D.date%3Dwindow.snake.timeKeeper.lastAppleDate%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(d))%7D%3Bwindow.snake.timeKeeper.savePB%3Dfunction(b%2Ca%2Cc%2Cf%2Ce%2Cg)%7Bb%3DMath.floor(b)%3Bvar d%3DlocalStorage.getItem("snake_timeKeeper")%3Bd%3DJSON.parse(d)%3Ba%3Da.toString()%2B"-"%2Bc%2B"-"%2Bf%2B"-"%2Be%2B"-"%2Bg%3B"undefined"%3D%3Dtypeof d%5Ba%5D%3Fd%5Ba%5D%3D%7Btime%3Ab%2Cdate%3Anew Date%2Catt%3A1%2Csum%3Ab%7D%3A("undefined"%3D%3Dtypeof d%5Ba%5D.att%26%26(d%5Ba%5D.att%3D0)%2Cd%5Ba%5D.att%2B%3D1%2C"undefined"%3D%3Dtypeof d%5Ba%5D.sum%26%26(d%5Ba%5D.sum%3D0)%2Cd%5Ba%5D.sum%2B%3Db%2Cb<d%5Ba%5D.time%26%26(d%5Ba%5D%3D%7Btime%3Ab%2Cdate%3Anew Date%2Catt%3Ad%5Ba%5D.att%2Csum%3Ad%5Ba%5D.sum%7D))%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(d))%7D%3Bwindow.snake.timeKeeper.addAttempt%3Dfunction(b%2Ca%2Cc%2Cf)%7Bvar e%3DlocalStorage.getItem("snake_timeKeeper")%3Be%3DJSON.parse(e)%3Bb%3D"att-"%2Bb%2B"-"%2Ba%2B"-"%2Bc%2B"-"%2Bf%3Be%5Bb%5D%3D"undefined"%3D%3Dtypeof e%5Bb%5D%3F1%3Ae%5Bb%5D%2B1%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(e))%7D%3Bwindow.snake.timeKeeper.setAttempts%3Dfunction(b)%7Bif(isNaN(b))console.log(b.toString()%2B" is not a number!")%3Belse%7Bvar a%3DlocalStorage.getItem("snake_timeKeeper")%3Ba%3DJSON.parse(a)%3Bmode%3Dwindow.snake.timeKeeper.getCurrentMode()%3Bcount%3Dwindow.snake.timeKeeper.getCurrentSetting("count")%3Bspeed%3Dwindow.snake.timeKeeper.getCurrentSetting("speed")%3Bsize%3Dwindow.snake.timeKeeper.getCurrentSetting("size")%3Bvar c%3D"att-"%2Bmode%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%3Ba%5Bc%5D%3D%7B%7D%3Ba%5Bc%5D%3Db%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(a))%7D%7D%3Bwindow.snake.timeKeeper.setPB%3Dfunction(b%2Ca%2Cc%2Cf)%7Bif(isNaN(b))console.log(b.toString()%2B" is not a number!")%3Belse if(25!%3Da%26%2650!%3Da%26%26100!%3Da%26%26"ALL"!%3Da)console.log(a%2B' has to be 25%2C 50%2C 100 or "ALL"!')%3Belse if(isNaN(c))console.log(c.toString()%2B" is not a number!")%3Belse if(isNaN(f))console.log(f.toString()%2B" is not a number!")%3Belse%7Bvar e%3DlocalStorage.getItem("snake_timeKeeper")%3Be%3DJSON.parse(e)%3Bmode%3Dwindow.snake.timeKeeper.getCurrentMode()%3Bcount%3Dwindow.snake.timeKeeper.getCurrentSetting("count")%3Bspeed%3Dwindow.snake.timeKeeper.getCurrentSetting("speed")%3Bsize%3Dwindow.snake.timeKeeper.getCurrentSetting("size")%3Ba%3Da.toString()%2B"-"%2Bmode%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%3Be%5Ba%5D%3D%7B%7D%3Be%5Ba%5D.time%3Db%3Be%5Ba%5D.date%3Dnew Date%3Be%5Ba%5D.att%3Dc%3Be%5Ba%5D.sum%3DMath.round(f*c)%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(e))%7D%7D%3Bwindow.snake.timeKeeper.setScore%3Dfunction(b%2Ca%2Cc)%7Bif(isNaN(b))console.log(b.toString()%2B" is not a number!")%3Belse if(isNaN(a))console.log(a.toString()%2B" is not a number!")%3Belse if(isNaN(c))console.log(c.toString()%2B" is not a number!")%3Belse%7Bvar f%3DlocalStorage.getItem("snake_timeKeeper")%3Bf%3DJSON.parse(f)%3Bmode%3Dwindow.snake.timeKeeper.getCurrentMode()%3Bcount%3Dwindow.snake.timeKeeper.getCurrentSetting("count")%3Bspeed%3Dwindow.snake.timeKeeper.getCurrentSetting("speed")%3Bsize%3Dwindow.snake.timeKeeper.getCurrentSetting("size")%3Bvar e%3D"H-"%2Bmode%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%3Bf%5Be%5D%3D%7B%7D%3Bf%5Be%5D.high%3Db%3Bf%5Be%5D.time%3Da%3Bf%5Be%5D.date%3Dnew Date%3Bf%5Be%5D.sum%3Dc*f%5B"att-"%2Bmode%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%5D%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(f))%7D%7D%3Bwindow.snake.timeKeeper.makeStorage%3Dfunction()%7Bvar b%3DlocalStorage.getItem("snake_timeKeeper")%3Bif(null%3D%3Db)%7Bif(b%3D%7Bversion%3A2%7D%2Cold_pbs%3DlocalStorage.getItem("snake_pbs")%2Cnull!%3Dold_pbs)for(old_pbs%3DJSON.parse(old_pbs)%2Cconsole.log("Converting local storage to new storage type...")%2Cmode%3D0%3B11>mode%3Bmode%2B%2B)for(modeStr%3D"000000000000000".split("")%2C0!%3Dmode%26%26(modeStr%5Bmode-1%5D%3D"1")%2CmodeStr%3DmodeStr.join("")%2Ccount%3D0%3B3>count%3Bcount%2B%2B)for(speed%3D0%3B3>speed%3Bspeed%2B%2B)for(size%3D0%3B3>size%3Bsize%2B%2B)for(var a%3D%24jscomp.makeIterator(%5B"25"%2C"50"%2C"100"%2C"ALL"%2C"att"%5D)%2Cc%3Da.next()%3B!c.done%3Bc%3Da.next())%7Bc%3Dc.value%3Bvar f%3Dc%2B"-"%2Bmode%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%3B"undefined"!%3Dtypeof old_pbs%5Bf%5D%26%26(console.log(f%2Cold_pbs%5Bf%5D)%2CnewName%3Dc%2B"-"%2BmodeStr%2B"-"%2Bcount%2B"-"%2Bspeed%2B"-"%2Bsize%2Cb%5BnewName%5D%3Dold_pbs%5Bf%5D)%7D%7Delse b%3DJSON.parse(b)%3B2!%3Db.version%26%26alert("Something went wrong with you localStorage!")%3BlocalStorage.setItem("snake_timeKeeper"%2CJSON.stringify(b))%7D%3Bwindow.snake.timeKeeper.showDialog%3Dfunction()%7Bdialog%3Ddocument.createElement("dialog")%3Bdialog.setAttribute("open"%2C"")%3Bdialog.setAttribute("id"%2C"timeKeeperDialog")%3Bvar b%3Dwindow.snake.timeKeeper.getCurrentSetting("count")%2Ca%3Dwindow.snake.timeKeeper.getCurrentSetting("speed")%2Cc%3Dwindow.snake.timeKeeper.getCurrentSetting("size")%2Cf%3Dwindow.snake.timeKeeper.getCurrentMode("size")%3Bcounter%3D0%3Bfor(var e%3D""%2Cg%3D%24jscomp.makeIterator(f)%2Cd%3Dg.next()%3B!d.done%3Bd%3Dg.next())%7Bt%3Dd.value%3Bif(1%3D%3Dt)switch(counter)%7Bcase 0%3Ae%2B%3D"Wall%2C "%3Bbreak%3Bcase 1%3Ae%2B%3D"Portal%2C "%3Bbreak%3Bcase 2%3Ae%2B%3D"Cheese%2C "%3Bbreak%3Bcase 3%3Ae%2B%3D"Infinity%2C "%3Bbreak%3Bcase 4%3Ae%2B%3D"Twin%2C "%3Bbreak%3Bcase 5%3Ae%2B%3D"Winged%2C "%3Bbreak%3Bcase 6%3Ae%2B%3D"YinYang%2C "%3Bbreak%3Bcase 7%3Ae%2B%3D"Key%2C "%3Bbreak%3Bcase 8%3Ae%2B%3D"Sokoban%2C "%3Bbreak%3Bcase 9%3Ae%2B%3D"Peaceful%2C "%3Bbreak%3Bdefault%3Ae%2B%3D"Unknown%2C "%7Dcounter%2B%2B%7D""%3D%3De%26%26(e%3D"Classic%2C ")%3Be%3De.substring(0%2Ce.lastIndexOf("%2C"))%3Bbold%3Ddocument.createElement("strong")%3Btextnode%3Ddocument.createTextNode("TimeKeeper")%3Bbold.appendChild(textnode)%3Bdialog.appendChild(bold)%3Bdialog.appendChild(document.createElement("br"))%3Bdialog.appendChild(document.createTextNode("Mode%3A "%2Be))%3Bdialog.appendChild(document.createElement("br"))%3Bswitch(b)%7Bcase 0%3Adialog.appendChild(document.createTextNode("1 Apple%2C "))%3Bbreak%3Bcase 1%3Adialog.appendChild(document.createTextNode("3 Apples%2C"))%3Bbreak%3Bdefault%3Adialog.appendChild(document.createTextNode("5 Apples%2C "))%7Dswitch(a)%7Bcase 0%3Adialog.appendChild(document.createTextNode("Normal speed%2C "))%3Bbreak%3Bcase 1%3Adialog.appendChild(document.createTextNode("Fast speed%2C"))%3Bbreak%3Bdefault%3Adialog.appendChild(document.createTextNode("Slow speed%2C "))%7Dswitch(c)%7Bcase 0%3Adialog.appendChild(document.createTextNode("Normal size"))%3Bbreak%3Bcase 1%3Adialog.appendChild(document.createTextNode("Small size"))%3Bbreak%3Bdefault%3Adialog.appendChild(document.createTextNode("Large size"))%7Ddialog.appendChild(document.createElement("br"))%3Bdialog.appendChild(document.createElement("br"))%3Bstorage%3DJSON.parse(localStorage.snake_timeKeeper)%3Be%3D0%3Bg%3D%24jscomp.makeIterator("att 25 50 100 ALL H".split(" "))%3Bfor(d%3Dg.next()%3B!d.done%3Bd%3Dg.next())%7Bvar h%3Dd.value%3Bd%3Dh%2B"-"%2Bf%2B"-"%2Bb%2B"-"%2Ba%2B"-"%2Bc%3Bif("undefined"!%3Dtypeof storage%5Bd%5D)%7Bbold%3Ddocument.createElement("strong")%3Bswitch(h)%7Bcase "25"%3Abold.appendChild(document.createTextNode("25 Apples%3A"))%3Bbreak%3Bcase "50"%3Abold.appendChild(document.createTextNode("50 Apples%3A"))%3Bbreak%3Bcase "100"%3Abold.appendChild(document.createTextNode("100 Apples%3A"))%3Bbreak%3Bcase "ALL"%3Abold.appendChild(document.createTextNode("All Apples%3A"))%3Bbreak%3Bcase "att"%3Abold.appendChild(document.createTextNode("Total Attempts%3A "))%3Bbreak%3Bcase "H"%3Abold.appendChild(document.createTextNode("Highscore%3A "))%7Ddialog.appendChild(bold)%3B"att"%3D%3Dh%3F(e%3Dstorage%5Bd%5D%2Cdialog.appendChild(document.createTextNode(e))%2Cdialog.appendChild(document.createElement("br")))%3A"H"%3D%3Dh%26%26dialog.appendChild(document.createTextNode(storage%5Bd%5D.high))%3Bdialog.appendChild(document.createElement("br"))%3Bif("att"!%3Dh)%7Bminutes%3DMath.floor(storage%5Bd%5D.time%2F6E4)%3Bseconds%3DMath.floor((storage%5Bd%5D.time-6E4*minutes)%2F1E3)%3Bmseconds%3Dstorage%5Bd%5D.time-6E4*minutes-1E3*seconds%3B2>minutes.toString().length%26%26(minutes%3D"0"%2Bminutes.toString())%3Bfor(2>seconds.toString().length%26%26(seconds%3D"0"%2Bseconds.toString())%3B3>mseconds.toString().length%3B)mseconds%3D"0"%2Bmseconds.toString()%3B"H"!%3Dh%3F(dialog.appendChild(document.createTextNode("Best Time%3A "%2Bminutes%2B"%3A"%2Bseconds%2B"%3A"%2Bmseconds))%2Cdialog.appendChild(document.createElement("br"))%2Cdialog.appendChild(document.createTextNode("Achieved on%3A "%2B(new Date(storage%5Bd%5D.date)).toString())))%3A(dialog.appendChild(document.createTextNode("Duration%3A "%2Bminutes%2B"%3A"%2Bseconds%2B"%3A"%2Bmseconds))%2Cdialog.appendChild(document.createElement("br"))%2Cdialog.appendChild(document.createTextNode("Achieved on%3A "%2B(new Date(storage%5Bd%5D.date)).toString()))%2Cdialog.appendChild(document.createElement("br"))%2Cdialog.appendChild(document.createTextNode("Average score%3A "%2B(Math.round(storage%5Bd%5D.sum%2Fe*100)%2F100).toString())))%3Bdialog.appendChild(document.createElement("br"))%3Bif(void 0!%3Dstorage%5Bd%5D.att%26%26void 0!%3Dstorage%5Bd%5D.sum)%7Bh%3DMath.floor(storage%5Bd%5D.sum%2Fstorage%5Bd%5D.att)%3Bminutes%3DMath.floor(h%2F6E4)%3Bseconds%3DMath.floor((h-6E4*minutes)%2F1E3)%3Bmseconds%3Dh-6E4*minutes-1E3*seconds%3B2>minutes.toString().length%26%26(minutes%3D"0"%2Bminutes.toString())%3Bfor(2>seconds.toString().length%26%26(seconds%3D"0"%2Bseconds.toString())%3B3>mseconds.toString().length%3B)mseconds%3D"0"%2Bmseconds.toString()%3Bdialog.appendChild(document.createTextNode("Attempts to this point%3A "%2Bstorage%5Bd%5D.att))%3Bdialog.appendChild(document.createElement("br"))%3Bdialog.appendChild(document.createTextNode("Average%3A "%2Bminutes%2B"%3A"%2Bseconds%2B"%3A"%2Bmseconds))%3Bdialog.appendChild(document.createElement("br"))%7Ddialog.appendChild(document.createElement("br"))%7D%7D%7Ddialog.appendChild(document.createElement("br"))%3BbuttonClose%3Ddocument.createElement("button")%3BbuttonClose.appendChild(document.createTextNode("Close"))%3BbuttonClose.addEventListener("click"%2Cfunction()%7Bchild%3Ddocument.getElementById("timeKeeperDialog")%3Bchild.parentElement.removeChild(child)%7D)%3Bdialog.appendChild(buttonClose)%3BbuttonExport%3Ddocument.createElement("button")%3BbuttonExport.appendChild(document.createTextNode("Export"))%3BbuttonExport.addEventListener("click"%2Cfunction()%7Bdownload("timeKeeper - "%2B(new Date).toString()%2B".txt"%2C'To import%3A open snake -> open console -> paste the following%3A%5CnlocalStorage%5B"snake_timeKeeper"%5D%3D%5C''%2BlocalStorage.snake_timeKeeper%2B"'")%7D)%3Bdialog.appendChild(buttonExport)%3Bdiv%3Ddocument.querySelector("body")%3Bdialog.setAttribute("style"%2C"z-index%3A9999%3Btop%3A-50px%3Bright%3A-50px%3Bbottom%3A-50px%3Bleft%3A-50px%3B")%3Bdiv.insertBefore(dialog%2Cdiv.firstChild)%7D%3Bfunction processSnakeCode(b)%7Bvar a%3Db.match(%2F%5Ba-zA-Z0-9_%24.%5D%7B1%2C40%7D%3Dfunction%5C(%5C)%5B%5E%5C%5C%5D%7B1%2C700%7DRIGHT"%3A0%5B%5E%5C%5C%5D*%3F%3Dfunction%2F)%5B0%5D%3Ba%3Da.substring(0%2Ca.lastIndexOf("%3B"))%3Bvar c%3Da.match(%2F!1%7D%5C)%3B%5B%5E%25%5D%7B0%2C10%7D%2F)%5B0%5D%3Bc%3Dc.substring(c.indexOf("(")%2B1%2Cc.lastIndexOf("("))%3BscoreFunc%3Da.match(%2F25!%3D%3Dthis.%5Ba-zA-Z0-9%24%5D%7B1%2C4%7D%2F)%5B0%5D%3BscoreFunc%3DscoreFunc.substring(scoreFunc.indexOf("this.")%2CscoreFunc.size)%3BtimeFunc%3Da.match(%2Fthis.%5Ba-zA-Z0-9%24%5D%7B1%2C6%7D%5C*this.%5Ba-zA-Z0-9%24%5D%7B1%2C6%7D%2F)%5B0%5D%3BownFuncIndex%3Da.indexOf(a.match(%2F!1%7D%5C)%3B%5B%5E%25%5D%7B0%2C10%7D%2F)%5B0%5D)%2B5%3BownFunc%3D"window.snake.timeKeeper.gotApple(Math.floor("%2BtimeFunc%2B")%2C"%2BscoreFunc%2B")%3B"%3Ba%3Da.slice(0%2CownFuncIndex)%2BownFunc%2Ba.slice(ownFuncIndex)%3Ba%3Da.slice(0%2Ca.indexOf("WIN.play()")%2B11)%2B"window.snake.timeKeeper.gotAll(Math.floor("%2BtimeFunc%2B")%2C"%2BscoreFunc%2B")%2C"%2Ba.slice(a.indexOf("WIN.play()")%2B11)%3Bdeath%3Da.match(%2Fif%5C(this.%5Ba-zA-Z0-9%24%5D%7B1%2C4%7D%5C%7C%5C%7Cthis.%5Ba-zA-Z0-9%24%5D%7B1%2C4%7D%5C)%2F)%5B0%5D%3Bdeath%3Ddeath.slice(death.indexOf("(")%2B1%2Cdeath.indexOf("%7C"))%3Ba%3Da.slice(0%2Ca.indexOf("%7B")%2B1)%2B"if("%2Bdeath%2B")%7Bwindow.snake.timeKeeper.death(Math.floor("%2BtimeFunc%2B")%2C"%2BscoreFunc%2B")%3B%7D"%2Ba.slice(a.indexOf("%7B")%2B1)%3Beval(a)%3Ba%3Db.match(%2F%5Ba-zA-Z0-9_%24%5D%7B1%2C6%7D%3Dfunction%5C(a%2Cb%5C)%7Bif%5C(!%5C(a.%5Ba-zA-Z0-9%24%5D%7B1%2C4%7D%5B%5E%5C%5C%5D*%3F%3Dfunction%2F)%5B0%5D%3Ba%3Da.substring(0%2Ca.lastIndexOf("%2C"))%3Bstep%3DtimeFunc.substring(0%2CtimeFunc.indexOf("*"))%3Bstep%3D"a"%2Bstep.slice(step.indexOf("."))%3Ba%3Da.slice(0%2Ca.indexOf("%7B")%2B1)%2B"if("%2Bstep%2B"%3D%3D0)%7Bwindow.snake.timeKeeper.start()%3B%7D"%2Ba.slice(a.indexOf("%7B")%2B1)%3Beval(a)%3Bb%3Db.match(%2F"%5B%5E"%5D%7B1%2C9%7D"%5B%5E"%5D%7B1%2C200%7D"00%3A00%3A000%2F)%5B0%5D%3Bb%3Db.substring(1%2Cb.indexOf('"'%2C2))%3Bdocument.querySelector('div%5Bjsname%5E%3D"'%2Bb%2B'"%5D').addEventListener("click"%2Cfunction(f)%7Bwindow.snake.timeKeeper.showDialog()%7D)%7Dwindow.snake.timeKeeper.setup%3Dfunction()%7Bvar b%3Ddocument.getElementsByTagName("script")%2Ca%3D""%3Bb%3D%24jscomp.makeIterator(b)%3Bfor(var c%3Db.next()%3B!c.done%3Bc%3Db.next())if(c%3Dc.value%2C""!%3Dc.src%26%26-1%3D%3Dc.src.indexOf("apis.google.com"))try%7Bvar f%3Dnew XMLHttpRequest%3Bf.open("GET"%2Cc.src)%3Bf.onload%3Dfunction()%7B-1!%3Dthis.responseText.indexOf("trophy")%26%26(a%3Dthis.responseText%2CprocessSnakeCode(a))%7D%3Bf.send()%7Dcatch(e)%7B%7Dwindow.snake.timeKeeper.makeStorage()%7D%3Bfunction download(b%2Ca)%7Bvar c%3Ddocument.createElement("a")%3Bc.setAttribute("href"%2C"data%3Atext%2Fplain%3Bcharset%3Dutf-8%2C"%2BencodeURIComponent(a))%3Bc.setAttribute("download"%2Cb)%3Bc.style.display%3D"none"%3Bdocument.body.appendChild(c)%3Bc.click()%3Bdocument.body.removeChild(c)%7Dwindow.snake.timeKeeper.setup()%3Bwindow.snake.speedrun()%3Bvoid+0
/*custom menu*/
javascript: req = new XMLHttpRequest(); req.open('GET', 'https://raw.githubusercontent.com/DarkSnakeGang/GoogleSnakeCustomMenuStuff/main/custom.js'); req.onload = function() { eval(this.responseText + 'snake.more_menu();'); }; req.send();
/*start of color menu*/
let animateSnakeGlobals = {
  startPlayback: false,
  startingTime: 0,
  framesPerSecond: 40,
  frameDoneSoFar: 0,
  currentColourArray: ["#FFFFFF","#000000"],
  cacheMode: false,
  cache: [],
  currentPatternString:"none",
  isPatternDisabled:false,
  currentBackgroundPatternString:"none",
  isBackgroundPatternDisabled:false,
};

/*Change to false when releasing - turns on console.log printing*/
let animatedSnakeModDebug = false;

window.snake.animate = function(){
  injectInitialHtmlAnimatedSnake();
  setupEventListenersAnimatedSnake();

  /*Set up default pattern to use (If I change this then I also need to change "selected" in the html)*/
  changePatterns("rollingRainbowRev","none");

  const scripts = document.body.getElementsByTagName('script');
    for(let script of scripts) {
      if(script.src == "" || script.src.indexOf('apis.google.com') != -1){
        continue;
      }
      const req = new XMLHttpRequest();
      req.open('GET', script.src);
      req.onload = function() {
        if(this.responseText.indexOf('trophy') !== -1)
          processCode(this.responseText);
      };
      req.send();
    }
};

function processCode(code) {
  /*find the name of the variable representing how many turns the snake has been alive for*/
  let lifetime = "a.ticks";
  animatedSnakeModDebug && console.log(lifetime);

  /*find names of variables with snake eyes/tongue etc*/

  let [, headColour, blinkImg, eatImg, dieImg] = code.match(/([$a-zA-Z0-9_]{0,6})=b\[0\],\n?this\.[$a-zA-Z0-9_]{0,6}=b\[1\],\n?[$a-zA-Z0-9_]{0,6}\(this\.([$a-zA-Z0-9_]{0,6}),"#5282F2",this\.[$a-zA-Z0-9_]{0,6}\),\n?[$a-zA-Z0-9_]{0,6}\(this\.([$a-zA-Z0-9_]{0,6}),"#5282F2",this\.[$a-zA-Z0-9_]{0,6}\),\n?[$a-zA-Z0-9_]{0,6}\(this.([$a-zA-Z0-9_]{0,6}),"#5282F2",\n?this.[$a-zA-Z0-9_]{0,6}\)/);
  let [, colourChangeFunc, snakeTongue, func2, func3] = code.match(/([$a-zA-Z0-9_]{0,6})\(this\.([$a-zA-Z0-9_]{0,6}),"#C73104",([$a-zA-Z0-9_]{0,6})\(([$a-zA-Z0-9_]{0,6})\(/);
  let hueFunc = code.match(/([$a-zA-Z0-9_]{0,6})\("#C73104"\)\,[$a-zA-Z0-9_]{0,6}\[0\]=\([$a-zA-Z0-9_]{0,6}\[0\]\+180/)[1];

  animatedSnakeModDebug && console.log(`${headColour},${blinkImg},${eatImg},${dieImg},${colourChangeFunc},${snakeTongue}`);
  /*grab code for the function we need to hijack*/
  let snakeColourFunction = findFunctionInCode(code,
    /[$a-zA-Z0-9_]{0,6}=function\(a,b,c,d,e\)$/,
    /a\.[$a-zA-Z0-9_]{0,6}&&10!==a\.[$a-zA-Z0-9_]{0,6}/,
    animatedSnakeModDebug);
  
  let updateHeadCode = `function updateHeadColour(a, headColour) {
    a.${headColour} = headColour;
    ${colourChangeFunc}(a.${blinkImg}, "#5282F2", headColour);/*Set blink image colours*/
    ${colourChangeFunc}(a.${eatImg}, "#5282F2", headColour);/*Set Eat image colours*/
    ${colourChangeFunc}(a.${dieImg}, "#000000", headColour);/*Set Die image colours*/
    var hue = ${hueFunc}(headColour);
    var b = ${hueFunc}("#C73104");
    b[0] = (hue[0] + 180) % 360;
    ${colourChangeFunc}(a.${snakeTongue}, "#C73104", ${func2}(${func3}(b[0], b[1], b[2])))/*Hue rotate to get tongue colour*/
  }`;

  eval(updateHeadCode);
  
  /*need to change a bit of code so that the head can change colour even for the rainbow snake*/
  let regex1 = /0===this\.[$a-zA-Z0-9_]{0,6}\|\|10===this\.[$a-zA-Z0-9_]{0,6}/;
  let func1 = findFunctionInCode(code,/[$a-zA-Z0-9_]{0,6}\.prototype\.[$a-zA-Z0-9_]{0,6}=function\(\)$/,regex1,animatedSnakeModDebug);
  func1 = assertReplace(func1,/\|\|10===this\.[$a-zA-Z0-9_]{0,6}/,"|| false");
  eval(func1);

  /* Enable caching */
  setupCaching(code);

  /* Background colour stuff */
  let [,rectangle,miniCanvas,tileLength] = code.match(/([$a-zA-Z0-9_]{0,6})\.height;d\+\+\)0!==\n?\(c\+d\)%2&&\(a\.([$a-zA-Z0-9_]{0,6})\.fillStyle="#a2d149",a\.[$a-zA-Z0-9_]{0,6}\.fillRect\(c\*a\.([$a-zA-Z0-9_]{0,6})/);

  let updateBackgroundFunc = `function updateBackground(a, frameNum) {
    if(animateSnakeGlobals.isBackgroundPatternDisabled) {
      return;
    }
    for (c = 0; c < a.${rectangle}.width; c++) {
      for (d = 0; d < a.${rectangle}.height; d++) {
        a.${miniCanvas}.fillStyle = getColourArrayFromCurrentBackgroundPattern(a, frameNum, c, d);
        a.${miniCanvas}.fillRect(c * a.${tileLength}, d * a.${tileLength}, a.${tileLength}, a.${tileLength});
      }
    }
  }`;
  animatedSnakeModDebug && console.log(updateBackgroundFunc);
  eval(updateBackgroundFunc);

  /* Use a safer shadow colour */
  eval(
    code.match(
      /[a-zA-Z0-9_$]{1,6}=function\(a\){a\.[a-zA-Z0-9_$]{1,6}\.globalCompositeOperation[^}]*"source-over"}/
    )[0].replace(
      /#94BD46/g,
      "#555555"
    )
  );

  let resetAnimationCode = `if(${lifetime} == 0) {
    animateSnakeGlobals.startPlayback = true;
    animateSnakeGlobals.startingTime = performance.now();
  }`;

  snakeColourFunction = assertReplace(snakeColourFunction,"{", "{" + resetAnimationCode);

  /*$& has a special meaning in replace()*/
  let hijackArrayCode = `if(animateSnakeGlobals.startPlayback) {
    var frameNum = Math.floor((performance.now() + (0.5*1000/animateSnakeGlobals.framesPerSecond)
     - animateSnakeGlobals.startingTime)/(1000/animateSnakeGlobals.framesPerSecond));
    
    if(frameNum !== animateSnakeGlobals.frameDoneSoFar) {
      animateSnakeGlobals.frameDoneSoFar = frameNum;

      if(!animateSnakeGlobals.isPatternDisabled) {
        animateSnakeGlobals.currentColourArray = getColourArrayFromCurrentPattern(frameNum);
        updateHeadColour(a, animateSnakeGlobals.currentColourArray[0]);
      }
      updateBackground(a, frameNum);
    }
      var g = animateSnakeGlobals.currentColourArray;
  }
  else {
    $&
  }`;
  snakeColourFunction = assertReplace(snakeColourFunction,/var g=e\?[$a-zA-Z0-9_]{0,6}:[$a-zA-Z0-9_]{0,6};/, hijackArrayCode);
  
  animatedSnakeModDebug && console.log(snakeColourFunction);
  eval(snakeColourFunction);
}

function getColourArrayFromCurrentPattern(frameNum) {
  return window[animateSnakeGlobals.currentPatternString](frameNum);
}

function getColourArrayFromCurrentBackgroundPattern(a, frameNum, c, d) {
  return window[animateSnakeGlobals.currentBackgroundPatternString](a, frameNum, c, d);
}

function changePatterns(pattern, backgroundPattern) {
  /*pattern is a string which contains the name of a function that takes a frame number (60fps) and returns an array with all the hex colours along the snake's body*/
  animateSnakeGlobals.currentPatternString = pattern;
  animateSnakeGlobals.currentBackgroundPatternString = backgroundPattern;

  /*Can we cache the images for snake's head?*/
  animateSnakeGlobals.cacheMode = ["temporalRainbow", "rollingRainbow", "rollingRainbowRev", "none"].includes(pattern);
  if(pattern.startsWith('singleColourFunctionCreator')) {
    animateSnakeGlobals.cacheMode = true;
  }

  //Show laggy notice if we aren't caching
  let lagNotice = document.getElementById('lag-notice');
  lagNotice.style.display = (animateSnakeGlobals.cacheMode ? 'none' : 'inline');

  //Turn off patterns if we don't want them
  animateSnakeGlobals.isPatternDisabled = (pattern === "none");
  animateSnakeGlobals.isBackgroundPatternDisabled = (backgroundPattern === "none");
}

function changeFrameRate(newFrameRate) {
  let frameRate = parseFloat(newFrameRate);
  if(isNaN(frameRate)) {
    return false;
  }
  if(frameRate < 0.00001) {
    return false;
  }
  if(frameRate > 60) {
    if(confirm('This Frame Rate Might Be Buggy / Laggy!')) {
      setFrameRate(frameRate);
    } else {
      return false;
    }
  }
  setFrameRate(frameRate);
}

function setFrameRate(frameRate) {
  /*set new frameRate*/
  animateSnakeGlobals.framesPerSecond = frameRate;
  document.getElementById('current-frame-rate').textContent = frameRate;
}

function setupCaching(code) {
  let recolourImageFunction = findFunctionInCode(code,
    /[$a-zA-Z0-9_]{0,6}=function\(a,b,c,d\)$/,
    /putImageData/,
    animatedSnakeModDebug);
  let canvasContext = recolourImageFunction.match(/a\.([$a-zA-Z0-9_]{0,6})\.putImageData/)[1];

  recolourImageFunction = assertReplace(recolourImageFunction,/a\.([$a-zA-Z0-9_]{0,6})\.putImageData\(([$a-zA-Z0-9_]{0,6}),0,0\)/,
  `if(animateSnakeGlobals.cacheMode) animateSnakeGlobals.cache[a.path + hex] = f;
    a.$1.putImageData($2, 0, 0);
  }`);
  
  /*Order is important, as the previous bit needs to match on the correct putImageData*/
  recolourImageFunction = assertReplace(recolourImageFunction,"if(a.loaded){",
  `var hex = c;
  if(a.loaded){
    if(animateSnakeGlobals.cacheMode && (a.path + hex) in animateSnakeGlobals.cache) {
      a.${canvasContext}.putImageData(animateSnakeGlobals.cache[a.path + hex], 0, 0)
    }
    else {`);
  animatedSnakeModDebug && console.log(recolourImageFunction);
  eval(recolourImageFunction);
}

function injectInitialHtmlAnimatedSnake() {
  let initialHtml = 
  `<div id="animated-snake-popup" style="margin:0px;position:fixed;z-index:9011;width:100%;">
  <div style="width:300px;padding:10px;background-color:#373629;z-index:9012;border-color:black;border-style:solid;border-width:2px;;box-shadow: 0 3px 10px rgba(0,0,0,0.5);position:fixed;right:5px;top:5px">
      <div class="font-effect-fire" style="text-align:center;padding:2px;background-color:transparent;font-family:sofia;font-size:25px">Animated Colors Menu</div>
      <div style="background-color:#555543;margin-top:5px;padding:0px;padding-bottom:10px;font-family:calibri;color:#FFFFFF;">
        <div style="margin:auto;padding:3px">
          <p style="margin-top:0">You'll Need To Put On The Rainbow Snake Color For This Mod To Work.<span style="color:red;"> Warning There Is Flashing Lights!</span></p>
          Snake Pattern
          <br>
          <select id="snake-pattern-chooser">
            <option value="none">none</option>
            <option value="defaultPattern">defaultPattern</option>
            <option value="seizure">seizure</option>
            <option value="temporalRainbow">temporalRainbow</option>
            <option value="rollingRainbow">rollingRainbow</option>
            <option value="rollingRainbowRev" selected="">rollingRainbowRev</option>
            <option value="strobeRainbow">strobeRainbow</option>
            <option value="variation">variation</option>
            <option value="variationV2">variationV2</option>
          </select>
          <span id="lag-notice" style="display:none;font-size:0.7em">(Might Be Laggy)</span>
        </div>
        <div style="margin:auto;padding:3px">
          Background Pattern
          <br>
          <select id="background-pattern-chooser">
            <option value="none" selected="">none</option>
            <option value="randomHexBg">randomHexBg</option>
            <option value="randomHexSameBg">randomHexSameBg</option>
            <option value="temporalBg">temporalBg</option>
            <option value="rollingRainbowBg">rollingRainbowBg</option>
            <option value="rollingRainbowBgOld">rollingRainbowBgOld</option>
          </select>
        </div>
        <div style="margin:auto;padding:3px">
        FrameRate / FPS <input id="frame-rate" type="text" size="3" value="40"><span> | Current Frames: <span id="current-frame-rate">40</span></span>
        </div>
        <div style="margin:auto;padding:3px">
        <button id="update-pattern" style="text-align:center;">Update FrameRate / FPS</button>
        </div>
        <div style="text-align:center;"><a id="animated-snake-close" href="#">Close</a> (J To Re-Show The GUI)</div>
      </div>
  </div>
</div>
`;

  let intialElement = document.createElement('div');
  intialElement.style.backgroundColor = 'transparent';
  intialElement.style.position = 'fixed';
  intialElement.style.zIndex = '9011';
  intialElement.innerHTML = initialHtml;

  document.getElementsByTagName('body')[0].prepend(intialElement);

  //Also inject css stylesheet needed for fire font
  let linkEl = document.createElement('link');
  linkEl.rel = 'stylesheet';
  linkEl.href = 'https://fonts.googleapis.com/css?family=Sofia&effect=fire';
  document.head.appendChild(linkEl);
};

function setupEventListenersAnimatedSnake() {
  document.getElementById('animated-snake-close').onclick = function() {
    document.getElementById('animated-snake-popup').hidden = true;
  };

  document.addEventListener('keydown',function(event) {
    if(event.key == 'j') {
      document.getElementById('animated-snake-popup').hidden = !document.getElementById('animated-snake-popup').hidden;
    }
  });

  document.getElementById('snake-pattern-chooser').onchange = function() {
    changePatterns(this.value,animateSnakeGlobals.currentBackgroundPatternString);
  }

  document.getElementById('background-pattern-chooser').onchange = function() {
    changePatterns(animateSnakeGlobals.currentPatternString, this.value);
  }

  document.getElementById('update-pattern').onclick = function() {
    changeFrameRate(document.getElementById('frame-rate').value);
  }

  document.getElementById('frame-rate').onkeyup = function(e) {
    if(e.key === 'Enter') {
      changeFrameRate(document.getElementById('frame-rate').value);
    }
  }
}

/*
This function will search for a function/method in some code and return this function as a string

code will usually be the snake source code

functionSignature will be regex matching the beginning of the function/method (must end in $),
for example if we are trying to find a function like s_xD = function(a, b, c, d, e) {......}
then put functionSignature = /[$a-zA-Z0-9_]{0,6}=function(a,b,c,d,e)$/

somethingInsideFunction will be regex matching something in the function
for example if we are trying to find a function like s_xD = function(a, b, c, d, e) {...a.Xa&&10!==a.Qb...}
then put somethingInsideFunction = /a\.[$a-zA-Z0-9_]{0,6}&&10!==a\.[$a-zA-Z0-9_]{0,6}/

levelsToGoUp tells us how many "layers" of curly brackets we need to go up before we get to our function

*/
function findFunctionInCode(code, functionSignature, somethingInsideFunction, logging = false) {
  /*Check functionSignature ends in $*/
  if(functionSignature.toString()[functionSignature.toString().length-2] !== "$") {
    throw new Error("functionSignature regex should end in $");
  }

  /*get the position of somethingInsideFunction*/
  let indexWithinFunction = code.search(somethingInsideFunction);
  if(indexWithinFunction == -1) {
    throw new Error("couldn't find a match for somethingInsideFunction");
  }

  /*expand outwards from somethingInsideFunction until we get to the function signature, then count brackets
  to find the end of the function*/
  startIndex = 0;
  for(let i = indexWithinFunction; i >= 0; i--) {
    let startOfCode = code.substring(0,i);
    startIndex = startOfCode.search(functionSignature);
    if(startIndex !== -1) {
      break;
    }
    if(i == 0) {
      throw new Error("Couldn't find function signature");
    }
  }

  let bracketCount = 0;
  let foundFirstBracket = false;
  let endIndex = 0;
  /*Use bracket counting to find the whole function*/
  let codeLength = code.length;
  for(let i = startIndex; i<=codeLength; i++){
    if(!foundFirstBracket && code[i] == "{") {
      foundFirstBracket = true;
    }

    if(code[i] == "{") {
      bracketCount++;
    }
    if(code[i] == "}") {
      bracketCount--;
    }
    if(foundFirstBracket && bracketCount == 0) {
      endIndex = i;
      break;
    }

    if(i == codeLength) {
      throw new Error("Couldn't pair up brackets");
    }
  }
  
  let fullFunction = code.substring(startIndex,endIndex + 1);

  /*throw error if fullFunction doesn't contain something inside function - i.e. function signature was wrong*/
  if(fullFunction.search(somethingInsideFunction) === -1) {
    throw new Error("Function signature does not belong to the same function as somethingInsideFunction");
  }

  if(logging) {
    console.log(fullFunction);
  }

  return fullFunction;
}

/*
Same as replace, but throws an error if nothing is changed
*/
function assertReplace(baseText, regex, replacement) {
  if(typeof baseText !== 'string') {
    throw new Error('String argument expected for assertReplace');
  }
  let outputText = baseText.replace(regex, replacement);

  if(baseText === outputText) {
    throw new Error('Failed to make any changes with replace');
  }

  return outputText;
}

/*
Same as replaceAll, but throws an error if nothing is changed
*/
function assertReplaceAll(baseText, regex, replacement) {
  if(typeof baseText !== 'string') {
    throw new Error('String argument expected for assertReplace');
  }
  let outputText = baseText.replaceAll(regex, replacement);

  if(baseText === outputText) {
    throw new Error('Failed to make any changes with replace');
  }

  return outputText;
}

/*below are custom patterns*/
function defaultPattern(frameNum) {
  let colourArray = [];

  let randColour = "#";
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
    randColour += Math.floor(Math.random()*10);
  for(let i = 0; i<504; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
}

function seizure(frameNum) {
  let colourArray = [];
  let randr = Math.floor(256*Math.random());
  let randg = Math.floor(256*Math.random());
  let randb = Math.floor(256*Math.random());
  let randColour = rgbToHex(randr,randg,randb);
  for(let i = 0; i<10; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
} 

function temporalRainbow(frameNum) {
  let colourArray = [];
  let hue = (frameNum % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
  for(let i = 0; i<10; i++) {
    colourArray[i] = randColour;
  }
  return colourArray;
}

function rollingRainbow(frameNum) {
  let colourArray = [];  
  for(let i = 0; i<30; i++) {
    let hue = ((frameNum + i*2) % 60)/60;
    let randColour = hsvToRgb(hue,1,1);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
    colourArray[i] = randColour;
  }
  return colourArray;
}

function rollingRainbowRev(frameNum) {
  let colourArray = [];  
  for(let i = 0; i<30; i++) {
    let hue = ((frameNum - i*2 + 60) % 60)/60;
    let randColour = hsvToRgb(hue,1,1);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
    colourArray[i] = randColour;
  }
  return colourArray;
}

/*note works best on lower fps*/
/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var strobeRainbow = (function() {
  let colorsSplashes = [];
  function strobeRainbow(frameNum) {
    /*add new splashes of colour at random*/
    if(Math.random() < 0.2) {
      let splashColour = hsvToRgb(Math.random(),1,1);
      splashColour = [Math.floor(splashColour[0]),Math.floor(splashColour[1]),Math.floor(splashColour[2])];
      colorsSplashes.push({rgb: splashColour, position: 50, spread: 3});
    }

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<50; i++) {
      let colourTotal = [255,255,255]; /*base colour is white*/
      let weight = 0.1;
      for(let splash of colorsSplashes) {
        if(Math.abs(splash.position - i) <= splash.spread) {
          let splashWeight = 1/(Math.abs(splash.position - i) + 1); 
          colourTotal = [colourTotal[0] + splashWeight*splash.rgb[0],colourTotal[1] + splashWeight*splash.rgb[1],colourTotal[2] + splashWeight*splash.rgb[2]];
          weight += splashWeight;
        }
      }
      colourArray[i] = rgbToHex(Math.floor(colourTotal[0]/weight),Math.floor(colourTotal[1]/weight),Math.floor(colourTotal[2]/weight));
    }

    /* Move splashes along body. Increase spread if they hit 0 */
    for(let i = 0; i < colorsSplashes.length; i++) {
      if(colorsSplashes[i].position > 0) {
        colorsSplashes[i].position--;
      } else {
        colorsSplashes[i].spread++;
        if(colorsSplashes[i].spread > 5 + Math.floor(4*Math.random())) {
          colorsSplashes.splice(i,1);
        }
      }
    }
    return colourArray;
  }
  return strobeRainbow;
})();

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var variation = (function() {
  /*specify all colours in hsv*/
  let colorsSplashes = [];
  let baseColour = [0.3,1,1];
  let patternLength = 50;
  function variation(frameNum) {
    /*add new splashes of colour at random*/
    /*if(Math.random() < 0.6) {*/
      let splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
      splashColour = [(baseColour[0]+Math.random()*0.4-0.4+1)%1,1,1];
      colorsSplashes.push({hsv: splashColour, position: Math.floor((patternLength-1)*Math.random()), spread: 4, aliveTime: 0, weightMultiplier: 0.2});
    /*}*/

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<patternLength; i++) {
      let weight = 0.1;
      let hsvTotal = [baseColour[0]*weight,baseColour[1]*weight,baseColour[2]*weight];
      for(let splash of colorsSplashes) {
        if(Math.abs(splash.position - i) <= splash.spread) {
          let splashWeight = splash.weightMultiplier*(1/(Math.abs(splash.position - i) + 1)); 
          hsvTotal = [hsvTotal[0] + splashWeight*splash.hsv[0],hsvTotal[1] + splashWeight*splash.hsv[1],hsvTotal[2] + splashWeight*splash.hsv[2]];
          weight += splashWeight;
        }
      }
      
      /*Adjust vibrance to fade in/out*/
      
      hsvColour = [hsvTotal[0]/weight,hsvTotal[1]/weight,hsvTotal[2]/weight];
      hsvColour[2] = 0.85+0.15*Math.sin(2*Math.PI*frameNum/120);

      let segmentColour = hsvToRgb(...hsvColour);
      colourArray[i] = rgbToHex(Math.floor(segmentColour[0]),Math.floor(segmentColour[1]),Math.floor(segmentColour[2]));
    }

    /* Move splashes around. Increase spread at random */
    for(let i = 0; i < colorsSplashes.length; i++) {
      
        colorsSplashes[i].position += Math.random() - 0.5;
        colorsSplashes[i].position = Math.min(colorsSplashes[i].position, patternLength - 1);
        colorsSplashes[i].position = Math.max(colorsSplashes[i].position, 0);

        if(colorsSplashes[i].aliveTime < 15) {
          colorsSplashes[i].weightMultiplier += 0.08;
        } else {
          colorsSplashes[i].weightMultiplier -= 0.08;
        }

        colorsSplashes[i].spread += Math.random() - 0.5;
        colorsSplashes[i].spread = Math.max(colorsSplashes[i].spread, 1);

        colorsSplashes[i].aliveTime++;
        if(colorsSplashes[i].aliveTime > 30) {
          colorsSplashes.splice(i,1);
        }
    }
    return colourArray;
  }
  return variation;
})();

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var variationV2 = (function() {
  /*specify all colours in hsv*/
  let baseColour = [0,1,1];
  const patternLength = 50;
  const totalWaveCount = 10;
  let waves = [];

  for(let i = 0; i < totalWaveCount; i++) {
    waves.push({weight: 0.15*Math.random(),
      bias: patternLength*Math.random(),
      wavelength: i + 1,
      period: 240*Math.random() + 1,
      timeBias: 240*Math.random()})
  }

  function variationV2(frameNum) {

    /*calculate colours along snake*/
    let colourArray = [];
    for(let i = 0; i<patternLength; i++) {
      let hue = baseColour[0];
      for(let j = 0; j<totalWaveCount;j++) {
        hue += waves[j].weight*Math.sin(2*Math.PI*(1/waves[j].wavelength)*(i+waves[j].bias))
        * Math.sin(2*Math.PI*(1/waves[j].period)*(frameNum+waves[j].timeBias));
      }
      hue = hue % 1 + 1;
      let saturation = 1;
      let vibrance = 0.85+0.15*Math.sin(2*Math.PI*frameNum/120);
      let colour = hsvToRgb(hue,saturation,vibrance);
      colour = [Math.floor(colour[0]),Math.floor(colour[1]),Math.floor(colour[2])];
      let hexColour = rgbToHex(...colour);
      colourArray[i] = hexColour;
    }
    return colourArray;
  }
  return variationV2;
})();

function singleColourFunctionCreator(hexcode) {
  if(!/^#[0-9a-f]{6}$/i.test(hexcode)) {
    hexcode = '#ffffff';
  }
  function singleColour() {
    let colourArray = [];
    for(let i = 0; i<10; i++) {
      colourArray[i] = hexcode;
    }
    return colourArray;
  }
  
  return singleColour;
}

/* Below are custom backgrounds */
function randomHexBg(a, frameNum, x, y) {
  let randColour = "#";
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  randColour += Math.floor(Math.random()*10);
  return randColour;
}

/*Hacky, but must use var instead of let so it can be accessed as window['functionName']*/
var randomHexSameBg = (function() {
  let currentFrameNum = 0;
  let currentColour = "#FFFFFF";
  return function (a, frameNum, x, y) {
    if(frameNum !== currentFrameNum) {
      currentFrameNum = frameNum;
      currentColour = "#";
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
      currentColour += Math.floor(Math.random()*10);
    }
    return currentColour;
  };
})();

function temporalBg(a, frameNum, x, y) {
  let hue = (frameNum % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
  return randColour;
}

function rollingRainbowBg(a, frameNum, x, y) { 
    let hue = ((frameNum + (x+y)*2) % 60)/60;
    let saturation = 0.62;
    let vibrance = 0.84;
    if((x + y) % 2 === 1) {
      saturation += 0.13;
      vibrance -= 0.13;
    }
    let randColour = hsvToRgb(hue,saturation,vibrance);
    randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
    randColour = rgbToHex(...randColour);
  return randColour;
}

function rollingRainbowBgOld(a, frameNum, x, y) { 
  let hue = ((frameNum + (x+y)*2) % 60)/60;
  let randColour = hsvToRgb(hue,1,1);
  randColour = [Math.floor(randColour[0]),Math.floor(randColour[1]),Math.floor(randColour[2])];
  randColour = rgbToHex(...randColour);
return randColour;
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
 function rgbToHsv(r, g, b) {
  r /= 255, g /= 255, b /= 255;

  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, v = max;

  var d = max - min;
  s = max == 0 ? 0 : d / max;

  if (max == min) {
    h = 0; /* achromatic */
  } else {
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }

    h /= 6;
  }

  return [ h, s, v ];
}

/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb(h, s, v) {
  var r, g, b;

  var i = Math.floor(h * 6);
  var f = h * 6 - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);

  switch (i % 6) {
    case 0: r = v, g = t, b = p; break;
    case 1: r = q, g = v, b = p; break;
    case 2: r = p, g = v, b = t; break;
    case 3: r = p, g = q, b = v; break;
    case 4: r = t, g = p, b = v; break;
    case 5: r = v, g = p, b = q; break;
  }

  return [ r * 255, g * 255, b * 255 ];
}
window.snake.animate();
